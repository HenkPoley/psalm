<?php

declare(strict_types=1);

namespace Psalm\Internal;

use PhpParser\Builder;
use PhpParser\Builder\ClassConst;
use PhpParser\Builder\Class_;
use PhpParser\Builder\Declaration;
use PhpParser\Builder\EnumCase;
use PhpParser\Builder\Enum_;
use PhpParser\Builder\FunctionLike;
use PhpParser\Builder\Function_;
use PhpParser\Builder\Interface_;
use PhpParser\Builder\Method;
use PhpParser\Builder\Namespace_;
use PhpParser\Builder\Param;
use PhpParser\Builder\Property;
use PhpParser\Builder\TraitUse;
use PhpParser\Builder\TraitUseAdaptation;
use PhpParser\Builder\Trait_;
use PhpParser\Builder\Use_;
use PhpParser\BuilderFactory;
use PhpParser\BuilderHelpers;
use PhpParser\Comment;
use PhpParser\Comment\Doc;
use PhpParser\ConstExprEvaluationException;
use PhpParser\ConstExprEvaluator;
use PhpParser\Error;
use PhpParser\ErrorHandler;
use PhpParser\ErrorHandler\Collecting;
use PhpParser\ErrorHandler\Throwing;
use PhpParser\Internal\DiffElem;
use PhpParser\Internal\Differ;
use PhpParser\Internal\PrintableNewAnonClassNode;
use PhpParser\Internal\TokenPolyfill;
use PhpParser\Internal\TokenStream;
use PhpParser\JsonDecoder;
use PhpParser\Lexer;
use PhpParser\Lexer\Emulative;
use PhpParser\Lexer\TokenEmulator\AsymmetricVisibilityTokenEmulator;
use PhpParser\Lexer\TokenEmulator\AttributeEmulator;
use PhpParser\Lexer\TokenEmulator\EnumTokenEmulator;
use PhpParser\Lexer\TokenEmulator\ExplicitOctalEmulator;
use PhpParser\Lexer\TokenEmulator\KeywordEmulator;
use PhpParser\Lexer\TokenEmulator\MatchTokenEmulator;
use PhpParser\Lexer\TokenEmulator\NullsafeTokenEmulator;
use PhpParser\Lexer\TokenEmulator\PropertyTokenEmulator;
use PhpParser\Lexer\TokenEmulator\ReadonlyFunctionTokenEmulator;
use PhpParser\Lexer\TokenEmulator\ReadonlyTokenEmulator;
use PhpParser\Lexer\TokenEmulator\ReverseEmulator;
use PhpParser\Lexer\TokenEmulator\TokenEmulator;
use PhpParser\Modifiers;
use PhpParser\NameContext;
use PhpParser\Node;
use PhpParser\Node\Arg;
use PhpParser\Node\ArrayItem;
use PhpParser\Node\Attribute;
use PhpParser\Node\AttributeGroup;
use PhpParser\Node\ClosureUse;
use PhpParser\Node\ComplexType;
use PhpParser\Node\Const_;
use PhpParser\Node\DeclareItem;
use PhpParser\Node\Expr;
use PhpParser\Node\Expr\ArrayDimFetch;
use PhpParser\Node\Expr\Array_;
use PhpParser\Node\Expr\ArrowFunction;
use PhpParser\Node\Expr\Assign;
use PhpParser\Node\Expr\AssignOp;
use PhpParser\Node\Expr\AssignOp\BitwiseAnd;
use PhpParser\Node\Expr\AssignOp\BitwiseOr;
use PhpParser\Node\Expr\AssignOp\BitwiseXor;
use PhpParser\Node\Expr\AssignOp\Coalesce;
use PhpParser\Node\Expr\AssignOp\Concat;
use PhpParser\Node\Expr\AssignOp\Div;
use PhpParser\Node\Expr\AssignOp\Minus;
use PhpParser\Node\Expr\AssignOp\Mod;
use PhpParser\Node\Expr\AssignOp\Mul;
use PhpParser\Node\Expr\AssignOp\Plus;
use PhpParser\Node\Expr\AssignOp\Pow;
use PhpParser\Node\Expr\AssignOp\ShiftLeft;
use PhpParser\Node\Expr\AssignOp\ShiftRight;
use PhpParser\Node\Expr\AssignRef;
use PhpParser\Node\Expr\BinaryOp;
use PhpParser\Node\Expr\BinaryOp\BooleanAnd;
use PhpParser\Node\Expr\BinaryOp\BooleanOr;
use PhpParser\Node\Expr\BinaryOp\Equal;
use PhpParser\Node\Expr\BinaryOp\Greater;
use PhpParser\Node\Expr\BinaryOp\GreaterOrEqual;
use PhpParser\Node\Expr\BinaryOp\Identical;
use PhpParser\Node\Expr\BinaryOp\LogicalAnd;
use PhpParser\Node\Expr\BinaryOp\LogicalOr;
use PhpParser\Node\Expr\BinaryOp\LogicalXor;
use PhpParser\Node\Expr\BinaryOp\NotEqual;
use PhpParser\Node\Expr\BinaryOp\NotIdentical;
use PhpParser\Node\Expr\BinaryOp\Smaller;
use PhpParser\Node\Expr\BinaryOp\SmallerOrEqual;
use PhpParser\Node\Expr\BinaryOp\Spaceship;
use PhpParser\Node\Expr\BitwiseNot;
use PhpParser\Node\Expr\BooleanNot;
use PhpParser\Node\Expr\CallLike;
use PhpParser\Node\Expr\Cast;
use PhpParser\Node\Expr\Cast\Bool_;
use PhpParser\Node\Expr\Cast\Double;
use PhpParser\Node\Expr\Cast\Int_;
use PhpParser\Node\Expr\Cast\Object_;
use PhpParser\Node\Expr\Cast\String_;
use PhpParser\Node\Expr\Cast\Unset_;
use PhpParser\Node\Expr\ClassConstFetch;
use PhpParser\Node\Expr\Clone_;
use PhpParser\Node\Expr\Closure;
use PhpParser\Node\Expr\ConstFetch;
use PhpParser\Node\Expr\Empty_;
use PhpParser\Node\Expr\ErrorSuppress;
use PhpParser\Node\Expr\Eval_;
use PhpParser\Node\Expr\Exit_;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Expr\Include_;
use PhpParser\Node\Expr\Instanceof_;
use PhpParser\Node\Expr\Isset_;
use PhpParser\Node\Expr\List_;
use PhpParser\Node\Expr\Match_;
use PhpParser\Node\Expr\MethodCall;
use PhpParser\Node\Expr\New_;
use PhpParser\Node\Expr\NullsafeMethodCall;
use PhpParser\Node\Expr\NullsafePropertyFetch;
use PhpParser\Node\Expr\PostDec;
use PhpParser\Node\Expr\PostInc;
use PhpParser\Node\Expr\PreDec;
use PhpParser\Node\Expr\PreInc;
use PhpParser\Node\Expr\Print_;
use PhpParser\Node\Expr\PropertyFetch;
use PhpParser\Node\Expr\ShellExec;
use PhpParser\Node\Expr\StaticCall;
use PhpParser\Node\Expr\StaticPropertyFetch;
use PhpParser\Node\Expr\Ternary;
use PhpParser\Node\Expr\Throw_;
use PhpParser\Node\Expr\UnaryMinus;
use PhpParser\Node\Expr\UnaryPlus;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Expr\YieldFrom;
use PhpParser\Node\Expr\Yield_;
use PhpParser\Node\Identifier;
use PhpParser\Node\InterpolatedStringPart;
use PhpParser\Node\IntersectionType;
use PhpParser\Node\MatchArm;
use PhpParser\Node\Name;
use PhpParser\Node\Name\FullyQualified;
use PhpParser\Node\Name\Relative;
use PhpParser\Node\NullableType;
use PhpParser\Node\PropertyHook;
use PhpParser\Node\PropertyItem;
use PhpParser\Node\Scalar;
use PhpParser\Node\Scalar\DNumber;
use PhpParser\Node\Scalar\Encapsed;
use PhpParser\Node\Scalar\EncapsedStringPart;
use PhpParser\Node\Scalar\Float_;
use PhpParser\Node\Scalar\InterpolatedString;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Scalar\MagicConst;
use PhpParser\Node\Scalar\MagicConst\Dir;
use PhpParser\Node\Scalar\MagicConst\File;
use PhpParser\Node\Scalar\MagicConst\Line;
use PhpParser\Node\StaticVar;
use PhpParser\Node\Stmt;
use PhpParser\Node\Stmt\Block;
use PhpParser\Node\Stmt\Break_;
use PhpParser\Node\Stmt\Case_;
use PhpParser\Node\Stmt\Catch_;
use PhpParser\Node\Stmt\ClassLike;
use PhpParser\Node\Stmt\ClassMethod;
use PhpParser\Node\Stmt\Continue_;
use PhpParser\Node\Stmt\DeclareDeclare;
use PhpParser\Node\Stmt\Declare_;
use PhpParser\Node\Stmt\Do_;
use PhpParser\Node\Stmt\Echo_;
use PhpParser\Node\Stmt\ElseIf_;
use PhpParser\Node\Stmt\Else_;
use PhpParser\Node\Stmt\Expression;
use PhpParser\Node\Stmt\Finally_;
use PhpParser\Node\Stmt\For_;
use PhpParser\Node\Stmt\Foreach_;
use PhpParser\Node\Stmt\Global_;
use PhpParser\Node\Stmt\Goto_;
use PhpParser\Node\Stmt\GroupUse;
use PhpParser\Node\Stmt\HaltCompiler;
use PhpParser\Node\Stmt\If_;
use PhpParser\Node\Stmt\InlineHTML;
use PhpParser\Node\Stmt\Label;
use PhpParser\Node\Stmt\Nop;
use PhpParser\Node\Stmt\PropertyProperty;
use PhpParser\Node\Stmt\Return_;
use PhpParser\Node\Stmt\Static_;
use PhpParser\Node\Stmt\Switch_;
use PhpParser\Node\Stmt\TraitUseAdaptation\Alias;
use PhpParser\Node\Stmt\TraitUseAdaptation\Precedence;
use PhpParser\Node\Stmt\TryCatch;
use PhpParser\Node\Stmt\UseUse;
use PhpParser\Node\Stmt\While_;
use PhpParser\Node\UnionType;
use PhpParser\Node\UseItem;
use PhpParser\Node\VarLikeIdentifier;
use PhpParser\Node\VariadicPlaceholder;
use PhpParser\NodeAbstract;
use PhpParser\NodeDumper;
use PhpParser\NodeFinder;
use PhpParser\NodeTraverser;
use PhpParser\NodeTraverserInterface;
use PhpParser\NodeVisitor;
use PhpParser\NodeVisitor\CloningVisitor;
use PhpParser\NodeVisitor\CommentAnnotatingVisitor;
use PhpParser\NodeVisitor\FindingVisitor;
use PhpParser\NodeVisitor\FirstFindingVisitor;
use PhpParser\NodeVisitor\NameResolver;
use PhpParser\NodeVisitor\NodeConnectingVisitor;
use PhpParser\NodeVisitor\ParentConnectingVisitor;
use PhpParser\NodeVisitorAbstract;
use PhpParser\Parser;
use PhpParser\Parser\Php7;
use PhpParser\Parser\Php8;
use PhpParser\ParserAbstract;
use PhpParser\ParserFactory;
use PhpParser\PhpVersion;
use PhpParser\PrettyPrinter;
use PhpParser\PrettyPrinter\Standard;
use PhpParser\PrettyPrinterAbstract;
use PhpParser\Token;
use Psalm\Aliases;
use Psalm\CodeLocation;
use Psalm\CodeLocation\DocblockTypeLocation;
use Psalm\CodeLocation\ParseErrorLocation;
use Psalm\CodeLocation\Raw;
use Psalm\Codebase;
use Psalm\Config;
use Psalm\Config\Creator;
use Psalm\Config\ErrorLevelFileFilter;
use Psalm\Config\FileFilter;
use Psalm\Config\IssueHandler;
use Psalm\Config\ProjectFileFilter;
use Psalm\Config\TaintAnalysisFileFilter;
use Psalm\Context;
use Psalm\DocComment;
use Psalm\ErrorBaseline;
use Psalm\Exception\CircularReferenceException;
use Psalm\Exception\CodeException;
use Psalm\Exception\ComplicatedExpressionException;
use Psalm\Exception\ConfigCreationException;
use Psalm\Exception\ConfigException;
use Psalm\Exception\ConfigNotFoundException;
use Psalm\Exception\DocblockParseException;
use Psalm\Exception\FileIncludeException;
use Psalm\Exception\IncorrectDocblockException;
use Psalm\Exception\InvalidClasslikeOverrideException;
use Psalm\Exception\InvalidMethodOverrideException;
use Psalm\Exception\RefactorException;
use Psalm\Exception\ScopeAnalysisException;
use Psalm\Exception\TypeParseTreeException;
use Psalm\Exception\UnanalyzedFileException;
use Psalm\Exception\UnpopulatedClasslikeException;
use Psalm\Exception\UnpreparedAnalysisException;
use Psalm\Exception\UnresolvableConstantException;
use Psalm\Exception\UnsupportedIssueToFixException;
use Psalm\FileBasedPluginAdapter;
use Psalm\FileManipulation;
use Psalm\FileSource;
use Psalm\Internal\Algebra;
use Psalm\Internal\Algebra\FormulaGenerator;
use Psalm\Internal\Analyzer\AlgebraAnalyzer;
use Psalm\Internal\Analyzer\AttributesAnalyzer;
use Psalm\Internal\Analyzer\CanAlias;
use Psalm\Internal\Analyzer\ClassAnalyzer;
use Psalm\Internal\Analyzer\ClassLikeAnalyzer;
use Psalm\Internal\Analyzer\ClassLikeNameOptions;
use Psalm\Internal\Analyzer\ClosureAnalyzer;
use Psalm\Internal\Analyzer\CommentAnalyzer;
use Psalm\Internal\Analyzer\DataFlowNodeData;
use Psalm\Internal\Analyzer\FileAnalyzer;
use Psalm\Internal\Analyzer\FunctionAnalyzer;
use Psalm\Internal\Analyzer\FunctionLike\ReturnTypeAnalyzer;
use Psalm\Internal\Analyzer\FunctionLike\ReturnTypeCollector;
use Psalm\Internal\Analyzer\FunctionLikeAnalyzer;
use Psalm\Internal\Analyzer\InterfaceAnalyzer;
use Psalm\Internal\Analyzer\IssueData;
use Psalm\Internal\Analyzer\MethodAnalyzer;
use Psalm\Internal\Analyzer\MethodComparator;
use Psalm\Internal\Analyzer\NamespaceAnalyzer;
use Psalm\Internal\Analyzer\ProjectAnalyzer;
use Psalm\Internal\Analyzer\ScopeAnalyzer;
use Psalm\Internal\Analyzer\SourceAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\DoAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\ForAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\ForeachAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\IfConditionalAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\IfElse\ElseAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\IfElse\ElseIfAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\IfElse\IfAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\IfElseAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\LoopAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\SwitchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\SwitchCaseAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\TryAnalyzer;
use Psalm\Internal\Analyzer\Statements\Block\WhileAnalyzer;
use Psalm\Internal\Analyzer\Statements\BreakAnalyzer;
use Psalm\Internal\Analyzer\Statements\ContinueAnalyzer;
use Psalm\Internal\Analyzer\Statements\DeclareAnalyzer;
use Psalm\Internal\Analyzer\Statements\EchoAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ArrayAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ArrayCreationInfo;
use Psalm\Internal\Analyzer\Statements\Expression\AssertionFinder;
use Psalm\Internal\Analyzer\Statements\Expression\Assignment\ArrayAssignmentAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Assignment\AssignedProperty;
use Psalm\Internal\Analyzer\Statements\Expression\Assignment\InstancePropertyAssignmentAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Assignment\StaticPropertyAssignmentAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\AssignmentAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\AndAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\ArithmeticOpAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\CoalesceAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\ConcatAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\NonComparisonOpAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOp\OrAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BinaryOpAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BitwiseNotAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\BooleanNotAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\ArgumentAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\ArgumentMapPopulator;
use Psalm\Internal\Analyzer\Statements\Expression\Call\ArgumentsAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\ArrayFunctionArgumentsAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\ClassTemplateParamCollector;
use Psalm\Internal\Analyzer\Statements\Expression\Call\FunctionCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\FunctionCallInfo;
use Psalm\Internal\Analyzer\Statements\Expression\Call\FunctionCallReturnTypeFetcher;
use Psalm\Internal\Analyzer\Statements\Expression\Call\HighOrderFunctionArgHandler;
use Psalm\Internal\Analyzer\Statements\Expression\Call\HighOrderFunctionArgInfo;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\AtomicCallContext;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\AtomicMethodCallAnalysisResult;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\AtomicMethodCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\ExistingAtomicMethodCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\MethodCallProhibitionAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\MethodCallPurityAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\MethodCallReturnTypeFetcher;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\MethodVisibilityAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\Method\MissingMethodCallHandler;
use Psalm\Internal\Analyzer\Statements\Expression\Call\MethodCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\NamedFunctionCallHandler;
use Psalm\Internal\Analyzer\Statements\Expression\Call\NewAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\StaticCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\StaticMethod\AtomicStaticCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Call\StaticMethod\ExistingAtomicStaticCallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\CallAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\CastAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ClassConstAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\CloneAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\EmptyAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\EncapsulatedStringAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\EvalAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ExitAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ExpressionIdentifier;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\ArrayFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\AtomicPropertyFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\ConstFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\InstancePropertyFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\StaticPropertyFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\Fetch\VariableFetchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\IncDecExpressionAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\IncludeAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\InstanceofAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\IssetAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\MagicConstAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\MatchAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\NullsafeAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\PrintAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\SimpleTypeInferer;
use Psalm\Internal\Analyzer\Statements\Expression\TernaryAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\ThrowAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\UnaryPlusMinusAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\YieldAnalyzer;
use Psalm\Internal\Analyzer\Statements\Expression\YieldFromAnalyzer;
use Psalm\Internal\Analyzer\Statements\ExpressionAnalyzer;
use Psalm\Internal\Analyzer\Statements\GlobalAnalyzer;
use Psalm\Internal\Analyzer\Statements\ReturnAnalyzer;
use Psalm\Internal\Analyzer\Statements\StaticAnalyzer;
use Psalm\Internal\Analyzer\Statements\UnsetAnalyzer;
use Psalm\Internal\Analyzer\Statements\UnusedAssignmentRemover;
use Psalm\Internal\Analyzer\StatementsAnalyzer;
use Psalm\Internal\Analyzer\TraitAnalyzer;
use Psalm\Internal\Analyzer\TypeAnalyzer;
use Psalm\Internal\Cache;
use Psalm\Internal\Clause;
use Psalm\Internal\Cli\Plugin;
use Psalm\Internal\Cli\Psalm;
use Psalm\Internal\Cli\Psalter;
use Psalm\Internal\Cli\Refactor;
use Psalm\Internal\Cli\Review;
use Psalm\Internal\CliUtils;
use Psalm\Internal\Codebase\Analyzer;
use Psalm\Internal\Codebase\AssertionsFromInheritanceResolver;
use Psalm\Internal\Codebase\ClassConstantByWildcardResolver;
use Psalm\Internal\Codebase\ClassLikes;
use Psalm\Internal\Codebase\ConstantTypeResolver;
use Psalm\Internal\Codebase\DataFlowGraph;
use Psalm\Internal\Codebase\Functions;
use Psalm\Internal\Codebase\ImpureFunctionsList;
use Psalm\Internal\Codebase\InternalCallMapHandler;
use Psalm\Internal\Codebase\Methods;
use Psalm\Internal\Codebase\Populator;
use Psalm\Internal\Codebase\Properties;
use Psalm\Internal\Codebase\PropertyMap;
use Psalm\Internal\Codebase\ReferenceMapGenerator;
use Psalm\Internal\Codebase\Reflection;
use Psalm\Internal\Codebase\Scanner;
use Psalm\Internal\Codebase\StorageByPatternResolver;
use Psalm\Internal\Codebase\TaintFlowGraph;
use Psalm\Internal\Codebase\VariableUseGraph;
use Psalm\Internal\Composer;
use Psalm\Internal\DataFlow\DataFlowNode;
use Psalm\Internal\DataFlow\Path;
use Psalm\Internal\DataFlow\TaintSink;
use Psalm\Internal\DataFlow\TaintSource;
use Psalm\Internal\Diff\AstDiffer;
use Psalm\Internal\Diff\ClassStatementsDiffer;
use Psalm\Internal\Diff\FileDiffer;
use Psalm\Internal\Diff\FileStatementsDiffer;
use Psalm\Internal\Diff\NamespaceStatementsDiffer;
use Psalm\Internal\EventDispatcher;
use Psalm\Internal\ExecutionEnvironment\BuildInfoCollector;
use Psalm\Internal\ExecutionEnvironment\GitInfoCollector;
use Psalm\Internal\ExecutionEnvironment\SystemCommandExecutor;
use Psalm\Internal\FileManipulation\ClassDocblockManipulator;
use Psalm\Internal\FileManipulation\CodeMigration;
use Psalm\Internal\FileManipulation\FileManipulationBuffer;
use Psalm\Internal\FileManipulation\FunctionDocblockManipulator;
use Psalm\Internal\FileManipulation\PropertyDocblockManipulator;
use Psalm\Internal\Fork\AnalyzerTask;
use Psalm\Internal\Fork\ForkContext;
use Psalm\Internal\Fork\IgbinarySerializer;
use Psalm\Internal\Fork\InitAnalyzerTask;
use Psalm\Internal\Fork\InitScannerTask;
use Psalm\Internal\Fork\Pool;
use Psalm\Internal\Fork\PsalmRestarter;
use Psalm\Internal\Fork\ScannerTask;
use Psalm\Internal\Fork\ShutdownAnalyzerTask;
use Psalm\Internal\Fork\ShutdownScannerTask;
use Psalm\Internal\IncludeCollector;
use Psalm\Internal\Json\Json;
use Psalm\Internal\LanguageServer\Client\Progress\LegacyProgress;
use Psalm\Internal\LanguageServer\Client\Progress\ProgressInterface;
use Psalm\Internal\LanguageServer\ClientConfiguration;
use Psalm\Internal\LanguageServer\ClientHandler;
use Psalm\Internal\LanguageServer\EmitterInterface;
use Psalm\Internal\LanguageServer\EmitterTrait;
use Psalm\Internal\LanguageServer\IdGenerator;
use Psalm\Internal\LanguageServer\LanguageClient;
use Psalm\Internal\LanguageServer\LanguageServer;
use Psalm\Internal\LanguageServer\Message;
use Psalm\Internal\LanguageServer\PHPMarkdownContent;
use Psalm\Internal\LanguageServer\PathMapper;
use Psalm\Internal\LanguageServer\ProtocolReader;
use Psalm\Internal\LanguageServer\ProtocolStreamReader;
use Psalm\Internal\LanguageServer\ProtocolStreamWriter;
use Psalm\Internal\LanguageServer\ProtocolWriter;
use Psalm\Internal\LanguageServer\Provider\ClassLikeStorageCacheProvider;
use Psalm\Internal\LanguageServer\Provider\FileReferenceCacheProvider;
use Psalm\Internal\LanguageServer\Provider\FileStorageCacheProvider;
use Psalm\Internal\LanguageServer\Provider\ParserCacheProvider;
use Psalm\Internal\LanguageServer\Provider\ProjectCacheProvider;
use Psalm\Internal\LanguageServer\Reference;
use Psalm\Internal\LanguageServer\Server\TextDocument;
use Psalm\Internal\LanguageServer\Server\Workspace;
use Psalm\Internal\MethodIdentifier;
use Psalm\Internal\PhpTraverser\CustomTraverser;
use Psalm\Internal\PhpVisitor\AssignmentMapVisitor;
use Psalm\Internal\PhpVisitor\CheckTrivialExprVisitor;
use Psalm\Internal\PhpVisitor\ConditionCloningVisitor;
use Psalm\Internal\PhpVisitor\NodeCleanerVisitor;
use Psalm\Internal\PhpVisitor\NodeCounterVisitor;
use Psalm\Internal\PhpVisitor\OffsetShifterVisitor;
use Psalm\Internal\PhpVisitor\ParamReplacementVisitor;
use Psalm\Internal\PhpVisitor\PartialParserVisitor;
use Psalm\Internal\PhpVisitor\Reflector\AttributeResolver;
use Psalm\Internal\PhpVisitor\Reflector\ClassLikeDocblockParser;
use Psalm\Internal\PhpVisitor\Reflector\ClassLikeNodeScanner;
use Psalm\Internal\PhpVisitor\Reflector\ExpressionResolver;
use Psalm\Internal\PhpVisitor\Reflector\ExpressionScanner;
use Psalm\Internal\PhpVisitor\Reflector\FunctionLikeDocblockParser;
use Psalm\Internal\PhpVisitor\Reflector\FunctionLikeDocblockScanner;
use Psalm\Internal\PhpVisitor\Reflector\FunctionLikeNodeScanner;
use Psalm\Internal\PhpVisitor\Reflector\TypeHintResolver;
use Psalm\Internal\PhpVisitor\ReflectorVisitor;
use Psalm\Internal\PhpVisitor\ShortClosureVisitor;
use Psalm\Internal\PhpVisitor\SimpleNameResolver;
use Psalm\Internal\PhpVisitor\TraitFinder;
use Psalm\Internal\PhpVisitor\TypeMappingVisitor;
use Psalm\Internal\PhpVisitor\YieldTypeCollector;
use Psalm\Internal\PluginManager\Command\DisableCommand;
use Psalm\Internal\PluginManager\Command\EnableCommand;
use Psalm\Internal\PluginManager\Command\ShowCommand;
use Psalm\Internal\PluginManager\ComposerLock;
use Psalm\Internal\PluginManager\ConfigFile;
use Psalm\Internal\PluginManager\PluginList;
use Psalm\Internal\PluginManager\PluginListFactory;
use Psalm\Internal\Provider\AddRemoveTaints\HtmlFunctionTainter;
use Psalm\Internal\Provider\ClassLikeStorageProvider;
use Psalm\Internal\Provider\DynamicFunctionStorageProvider;
use Psalm\Internal\Provider\FakeFileProvider;
use Psalm\Internal\Provider\FileProvider;
use Psalm\Internal\Provider\FileReferenceProvider;
use Psalm\Internal\Provider\FileStorageProvider;
use Psalm\Internal\Provider\FunctionExistenceProvider;
use Psalm\Internal\Provider\FunctionParamsProvider;
use Psalm\Internal\Provider\FunctionReturnTypeProvider;
use Psalm\Internal\Provider\MethodExistenceProvider;
use Psalm\Internal\Provider\MethodParamsProvider;
use Psalm\Internal\Provider\MethodReturnTypeProvider;
use Psalm\Internal\Provider\MethodVisibilityProvider;
use Psalm\Internal\Provider\NodeDataProvider;
use Psalm\Internal\Provider\ParamsProvider\ArrayFilterParamsProvider;
use Psalm\Internal\Provider\ParamsProvider\ArrayMultisortParamsProvider;
use Psalm\Internal\Provider\ParamsProvider\ArrayUArrayParamsProvider;
use Psalm\Internal\Provider\PropertyExistenceProvider;
use Psalm\Internal\Provider\PropertyTypeProvider;
use Psalm\Internal\Provider\PropertyTypeProvider\DomDocumentPropertyTypeProvider;
use Psalm\Internal\Provider\PropertyVisibilityProvider;
use Psalm\Internal\Provider\Providers;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayChunkReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayColumnReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayCombineReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayFillKeysReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayFillReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayFilterReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayMapReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayMergeReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayPadReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayPointerAdjustmentReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayPopReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayRandReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayReduceReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArrayReverseReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArraySliceReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ArraySpliceReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\BasenameReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ClosureFromCallableReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\DateReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\DateTimeModifyReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\DirnameReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\DomNodeAppendChild;
use Psalm\Internal\Provider\ReturnTypeProvider\FilterInputReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\FilterUtils;
use Psalm\Internal\Provider\ReturnTypeProvider\FilterVarReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\FirstArgStringReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\GetClassMethodsReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\GetObjectVarsReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\HexdecReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ImagickPixelColorReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\InArrayReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\IteratorToArrayReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\MbInternalEncodingReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\MinMaxReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\MktimeReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\ParseUrlReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\PdoStatementReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\PdoStatementSetFetchMode;
use Psalm\Internal\Provider\ReturnTypeProvider\PowReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\RandReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\RoundReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\SprintfReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\StrReplaceReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\StrTrReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\TriggerErrorReturnTypeProvider;
use Psalm\Internal\Provider\ReturnTypeProvider\VersionCompareReturnTypeProvider;
use Psalm\Internal\Provider\StatementsProvider;
use Psalm\Internal\ReferenceConstraint;
use Psalm\Internal\RuntimeCaches;
use Psalm\Internal\Scanner\ClassLikeDocblockComment;
use Psalm\Internal\Scanner\DocblockParser;
use Psalm\Internal\Scanner\FileScanner;
use Psalm\Internal\Scanner\FunctionDocblockComment;
use Psalm\Internal\Scanner\ParsedDocblock;
use Psalm\Internal\Scanner\PhpStormMetaScanner;
use Psalm\Internal\Scanner\UnresolvedConstant\ArrayOffsetFetch;
use Psalm\Internal\Scanner\UnresolvedConstant\ArraySpread;
use Psalm\Internal\Scanner\UnresolvedConstant\ArrayValue;
use Psalm\Internal\Scanner\UnresolvedConstant\ClassConstant;
use Psalm\Internal\Scanner\UnresolvedConstant\Constant;
use Psalm\Internal\Scanner\UnresolvedConstant\EnumNameFetch;
use Psalm\Internal\Scanner\UnresolvedConstant\EnumPropertyFetch;
use Psalm\Internal\Scanner\UnresolvedConstant\EnumValueFetch;
use Psalm\Internal\Scanner\UnresolvedConstant\KeyValuePair;
use Psalm\Internal\Scanner\UnresolvedConstant\ScalarValue;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedAdditionOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedBinaryOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedBitwiseAnd;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedBitwiseOr;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedBitwiseXor;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedConcatOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedDivisionOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedMultiplicationOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedSubtractionOp;
use Psalm\Internal\Scanner\UnresolvedConstant\UnresolvedTernary;
use Psalm\Internal\Scanner\UnresolvedConstantComponent;
use Psalm\Internal\Scanner\VarDocblockComment;
use Psalm\Internal\Scope\CaseScope;
use Psalm\Internal\Scope\FinallyScope;
use Psalm\Internal\Scope\IfConditionalScope;
use Psalm\Internal\Scope\IfScope;
use Psalm\Internal\Scope\LoopScope;
use Psalm\Internal\Scope\SwitchScope;
use Psalm\Internal\Stubs\Generator\ClassLikeStubGenerator;
use Psalm\Internal\Stubs\Generator\StubsGenerator;
use Psalm\Internal\Type\ArrayType;
use Psalm\Internal\Type\AssertionReconciler;
use Psalm\Internal\Type\ClosedInheritanceToUnion;
use Psalm\Internal\Type\Comparator\ArrayTypeComparator;
use Psalm\Internal\Type\Comparator\AtomicTypeComparator;
use Psalm\Internal\Type\Comparator\CallableTypeComparator;
use Psalm\Internal\Type\Comparator\ClassLikeStringComparator;
use Psalm\Internal\Type\Comparator\GenericTypeComparator;
use Psalm\Internal\Type\Comparator\IntegerRangeComparator;
use Psalm\Internal\Type\Comparator\KeyedArrayComparator;
use Psalm\Internal\Type\Comparator\ObjectComparator;
use Psalm\Internal\Type\Comparator\ScalarTypeComparator;
use Psalm\Internal\Type\Comparator\TypeComparisonResult;
use Psalm\Internal\Type\Comparator\UnionTypeComparator;
use Psalm\Internal\Type\NegatedAssertionReconciler;
use Psalm\Internal\Type\ParseTree;
use Psalm\Internal\Type\ParseTree\CallableParamTree;
use Psalm\Internal\Type\ParseTree\CallableTree;
use Psalm\Internal\Type\ParseTree\CallableWithReturnTypeTree;
use Psalm\Internal\Type\ParseTree\ConditionalTree;
use Psalm\Internal\Type\ParseTree\EncapsulationTree;
use Psalm\Internal\Type\ParseTree\FieldEllipsis;
use Psalm\Internal\Type\ParseTree\GenericTree;
use Psalm\Internal\Type\ParseTree\IndexedAccessTree;
use Psalm\Internal\Type\ParseTree\IntersectionTree;
use Psalm\Internal\Type\ParseTree\KeyedArrayPropertyTree;
use Psalm\Internal\Type\ParseTree\KeyedArrayTree;
use Psalm\Internal\Type\ParseTree\MethodParamTree;
use Psalm\Internal\Type\ParseTree\MethodTree;
use Psalm\Internal\Type\ParseTree\MethodWithReturnTypeTree;
use Psalm\Internal\Type\ParseTree\NullableTree;
use Psalm\Internal\Type\ParseTree\Root;
use Psalm\Internal\Type\ParseTree\TemplateAsTree;
use Psalm\Internal\Type\ParseTree\TemplateIsTree;
use Psalm\Internal\Type\ParseTree\UnionTree;
use Psalm\Internal\Type\ParseTree\Value;
use Psalm\Internal\Type\ParseTreeCreator;
use Psalm\Internal\Type\SimpleAssertionReconciler;
use Psalm\Internal\Type\SimpleNegatedAssertionReconciler;
use Psalm\Internal\Type\TemplateBound;
use Psalm\Internal\Type\TemplateInferredTypeReplacer;
use Psalm\Internal\Type\TemplateResult;
use Psalm\Internal\Type\TemplateStandinTypeReplacer;
use Psalm\Internal\Type\TypeAlias;
use Psalm\Internal\Type\TypeAlias\ClassTypeAlias;
use Psalm\Internal\Type\TypeAlias\InlineTypeAlias;
use Psalm\Internal\Type\TypeAlias\LinkableTypeAlias;
use Psalm\Internal\Type\TypeCombination;
use Psalm\Internal\Type\TypeCombiner;
use Psalm\Internal\Type\TypeExpander;
use Psalm\Internal\Type\TypeParser;
use Psalm\Internal\Type\TypeTokenizer;
use Psalm\Internal\TypeVisitor\CanContainObjectTypeVisitor;
use Psalm\Internal\TypeVisitor\ClasslikeReplacer;
use Psalm\Internal\TypeVisitor\ContainsClassLikeVisitor;
use Psalm\Internal\TypeVisitor\ContainsLiteralVisitor;
use Psalm\Internal\TypeVisitor\ContainsStaticVisitor;
use Psalm\Internal\TypeVisitor\FromDocblockSetter;
use Psalm\Internal\TypeVisitor\TemplateTypeCollector;
use Psalm\Internal\TypeVisitor\TypeChecker;
use Psalm\Internal\TypeVisitor\TypeLocalizer;
use Psalm\Internal\TypeVisitor\TypeScanner;
use Psalm\Internal\VersionUtils;
use Psalm\Issue\AbstractInstantiation;
use Psalm\Issue\AbstractMethodCall;
use Psalm\Issue\AmbiguousConstantInheritance;
use Psalm\Issue\ArgumentIssue;
use Psalm\Issue\ArgumentTypeCoercion;
use Psalm\Issue\AssignmentToVoid;
use Psalm\Issue\CheckType;
use Psalm\Issue\CircularReference;
use Psalm\Issue\ClassConstantIssue;
use Psalm\Issue\ClassIssue;
use Psalm\Issue\ClassMustBeFinal;
use Psalm\Issue\CodeIssue;
use Psalm\Issue\ComplexFunction;
use Psalm\Issue\ComplexMethod;
use Psalm\Issue\ConfigIssue;
use Psalm\Issue\ConflictingReferenceConstraint;
use Psalm\Issue\ConstantDeclarationInTrait;
use Psalm\Issue\ConstructorSignatureMismatch;
use Psalm\Issue\ContinueOutsideLoop;
use Psalm\Issue\DeprecatedClass;
use Psalm\Issue\DeprecatedConstant;
use Psalm\Issue\DeprecatedFunction;
use Psalm\Issue\DeprecatedInterface;
use Psalm\Issue\DeprecatedMethod;
use Psalm\Issue\DeprecatedProperty;
use Psalm\Issue\DeprecatedTrait;
use Psalm\Issue\DirectConstructorCall;
use Psalm\Issue\DocblockTypeContradiction;
use Psalm\Issue\DuplicateArrayKey;
use Psalm\Issue\DuplicateClass;
use Psalm\Issue\DuplicateConstant;
use Psalm\Issue\DuplicateEnumCase;
use Psalm\Issue\DuplicateEnumCaseValue;
use Psalm\Issue\DuplicateFunction;
use Psalm\Issue\DuplicateMethod;
use Psalm\Issue\DuplicateParam;
use Psalm\Issue\DuplicateProperty;
use Psalm\Issue\EmptyArrayAccess;
use Psalm\Issue\ExtensionRequirementViolation;
use Psalm\Issue\FalsableReturnStatement;
use Psalm\Issue\FalseOperand;
use Psalm\Issue\ForbiddenCode;
use Psalm\Issue\FunctionIssue;
use Psalm\Issue\IfThisIsMismatch;
use Psalm\Issue\ImplementationRequirementViolation;
use Psalm\Issue\ImplementedParamTypeMismatch;
use Psalm\Issue\ImplementedReturnTypeMismatch;
use Psalm\Issue\ImplicitToStringCast;
use Psalm\Issue\ImpureByReferenceAssignment;
use Psalm\Issue\ImpureFunctionCall;
use Psalm\Issue\ImpureMethodCall;
use Psalm\Issue\ImpurePropertyAssignment;
use Psalm\Issue\ImpurePropertyFetch;
use Psalm\Issue\ImpureStaticProperty;
use Psalm\Issue\ImpureStaticVariable;
use Psalm\Issue\ImpureVariable;
use Psalm\Issue\InaccessibleClassConstant;
use Psalm\Issue\InaccessibleMethod;
use Psalm\Issue\InaccessibleProperty;
use Psalm\Issue\InheritorViolation;
use Psalm\Issue\InterfaceInstantiation;
use Psalm\Issue\InternalClass;
use Psalm\Issue\InternalMethod;
use Psalm\Issue\InternalProperty;
use Psalm\Issue\InvalidArgument;
use Psalm\Issue\InvalidArrayAccess;
use Psalm\Issue\InvalidArrayAssignment;
use Psalm\Issue\InvalidArrayOffset;
use Psalm\Issue\InvalidAttribute;
use Psalm\Issue\InvalidCast;
use Psalm\Issue\InvalidCatch;
use Psalm\Issue\InvalidClass;
use Psalm\Issue\InvalidClassConstantType;
use Psalm\Issue\InvalidClone;
use Psalm\Issue\InvalidConstantAssignmentValue;
use Psalm\Issue\InvalidDocblock;
use Psalm\Issue\InvalidDocblockParamName;
use Psalm\Issue\InvalidEnumBackingType;
use Psalm\Issue\InvalidEnumCaseValue;
use Psalm\Issue\InvalidEnumMethod;
use Psalm\Issue\InvalidExtendClass;
use Psalm\Issue\InvalidFalsableReturnType;
use Psalm\Issue\InvalidFunctionCall;
use Psalm\Issue\InvalidGlobal;
use Psalm\Issue\InvalidInterfaceImplementation;
use Psalm\Issue\InvalidIterator;
use Psalm\Issue\InvalidLiteralArgument;
use Psalm\Issue\InvalidMethodCall;
use Psalm\Issue\InvalidNamedArgument;
use Psalm\Issue\InvalidNullableReturnType;
use Psalm\Issue\InvalidOperand;
use Psalm\Issue\InvalidOverride;
use Psalm\Issue\InvalidParamDefault;
use Psalm\Issue\InvalidParent;
use Psalm\Issue\InvalidPassByReference;
use Psalm\Issue\InvalidPropertyAssignment;
use Psalm\Issue\InvalidPropertyAssignmentValue;
use Psalm\Issue\InvalidPropertyFetch;
use Psalm\Issue\InvalidReturnStatement;
use Psalm\Issue\InvalidReturnType;
use Psalm\Issue\InvalidScalarArgument;
use Psalm\Issue\InvalidScope;
use Psalm\Issue\InvalidStaticInvocation;
use Psalm\Issue\InvalidStringClass;
use Psalm\Issue\InvalidTemplateParam;
use Psalm\Issue\InvalidThrow;
use Psalm\Issue\InvalidToString;
use Psalm\Issue\InvalidTraversableImplementation;
use Psalm\Issue\InvalidTypeImport;
use Psalm\Issue\LessSpecificClassConstantType;
use Psalm\Issue\LessSpecificImplementedReturnType;
use Psalm\Issue\LessSpecificReturnStatement;
use Psalm\Issue\LessSpecificReturnType;
use Psalm\Issue\LiteralKeyUnshapedArray;
use Psalm\Issue\LoopInvalidation;
use Psalm\Issue\MethodIssue;
use Psalm\Issue\MethodSignatureMismatch;
use Psalm\Issue\MethodSignatureMustOmitReturnType;
use Psalm\Issue\MethodSignatureMustProvideReturnType;
use Psalm\Issue\MismatchingDocblockParamType;
use Psalm\Issue\MismatchingDocblockPropertyType;
use Psalm\Issue\MismatchingDocblockReturnType;
use Psalm\Issue\MissingClassConstType;
use Psalm\Issue\MissingClosureParamType;
use Psalm\Issue\MissingClosureReturnType;
use Psalm\Issue\MissingConstructor;
use Psalm\Issue\MissingDependency;
use Psalm\Issue\MissingDocblockType;
use Psalm\Issue\MissingFile;
use Psalm\Issue\MissingImmutableAnnotation;
use Psalm\Issue\MissingOverrideAttribute;
use Psalm\Issue\MissingParamType;
use Psalm\Issue\MissingPropertyType;
use Psalm\Issue\MissingReturnType;
use Psalm\Issue\MissingTemplateParam;
use Psalm\Issue\MissingThrowsDocblock;
use Psalm\Issue\MixedArgument;
use Psalm\Issue\MixedArgumentTypeCoercion;
use Psalm\Issue\MixedArrayAccess;
use Psalm\Issue\MixedArrayAssignment;
use Psalm\Issue\MixedArrayOffset;
use Psalm\Issue\MixedArrayTypeCoercion;
use Psalm\Issue\MixedAssignment;
use Psalm\Issue\MixedClone;
use Psalm\Issue\MixedFunctionCall;
use Psalm\Issue\MixedIssue;
use Psalm\Issue\MixedIssueTrait;
use Psalm\Issue\MixedMethodCall;
use Psalm\Issue\MixedOperand;
use Psalm\Issue\MixedPropertyAssignment;
use Psalm\Issue\MixedPropertyFetch;
use Psalm\Issue\MixedPropertyTypeCoercion;
use Psalm\Issue\MixedReturnStatement;
use Psalm\Issue\MixedReturnTypeCoercion;
use Psalm\Issue\MixedStringOffsetAssignment;
use Psalm\Issue\MoreSpecificImplementedParamType;
use Psalm\Issue\MoreSpecificReturnType;
use Psalm\Issue\MutableDependency;
use Psalm\Issue\NamedArgumentNotAllowed;
use Psalm\Issue\NoEnumProperties;
use Psalm\Issue\NoInterfaceProperties;
use Psalm\Issue\NoValue;
use Psalm\Issue\NonInvariantDocblockPropertyType;
use Psalm\Issue\NonInvariantPropertyType;
use Psalm\Issue\NonStaticSelfCall;
use Psalm\Issue\NonVariableReferenceReturn;
use Psalm\Issue\NullArgument;
use Psalm\Issue\NullArrayAccess;
use Psalm\Issue\NullArrayOffset;
use Psalm\Issue\NullFunctionCall;
use Psalm\Issue\NullIterator;
use Psalm\Issue\NullOperand;
use Psalm\Issue\NullPropertyAssignment;
use Psalm\Issue\NullPropertyFetch;
use Psalm\Issue\NullReference;
use Psalm\Issue\NullableReturnStatement;
use Psalm\Issue\OverriddenFinalConstant;
use Psalm\Issue\OverriddenInterfaceConstant;
use Psalm\Issue\OverriddenMethodAccess;
use Psalm\Issue\OverriddenPropertyAccess;
use Psalm\Issue\ParadoxicalCondition;
use Psalm\Issue\ParamNameMismatch;
use Psalm\Issue\ParentNotFound;
use Psalm\Issue\ParseError;
use Psalm\Issue\PluginIssue;
use Psalm\Issue\PossibleRawObjectIteration;
use Psalm\Issue\PossiblyFalseArgument;
use Psalm\Issue\PossiblyFalseIterator;
use Psalm\Issue\PossiblyFalseOperand;
use Psalm\Issue\PossiblyFalsePropertyAssignmentValue;
use Psalm\Issue\PossiblyFalseReference;
use Psalm\Issue\PossiblyInvalidArgument;
use Psalm\Issue\PossiblyInvalidArrayAccess;
use Psalm\Issue\PossiblyInvalidArrayAssignment;
use Psalm\Issue\PossiblyInvalidArrayOffset;
use Psalm\Issue\PossiblyInvalidCast;
use Psalm\Issue\PossiblyInvalidClone;
use Psalm\Issue\PossiblyInvalidDocblockTag;
use Psalm\Issue\PossiblyInvalidFunctionCall;
use Psalm\Issue\PossiblyInvalidIterator;
use Psalm\Issue\PossiblyInvalidMethodCall;
use Psalm\Issue\PossiblyInvalidOperand;
use Psalm\Issue\PossiblyInvalidPropertyAssignment;
use Psalm\Issue\PossiblyInvalidPropertyAssignmentValue;
use Psalm\Issue\PossiblyInvalidPropertyFetch;
use Psalm\Issue\PossiblyNullArgument;
use Psalm\Issue\PossiblyNullArrayAccess;
use Psalm\Issue\PossiblyNullArrayAssignment;
use Psalm\Issue\PossiblyNullArrayOffset;
use Psalm\Issue\PossiblyNullFunctionCall;
use Psalm\Issue\PossiblyNullIterator;
use Psalm\Issue\PossiblyNullOperand;
use Psalm\Issue\PossiblyNullPropertyAssignment;
use Psalm\Issue\PossiblyNullPropertyAssignmentValue;
use Psalm\Issue\PossiblyNullPropertyFetch;
use Psalm\Issue\PossiblyNullReference;
use Psalm\Issue\PossiblyUndefinedArrayOffset;
use Psalm\Issue\PossiblyUndefinedGlobalVariable;
use Psalm\Issue\PossiblyUndefinedIntArrayOffset;
use Psalm\Issue\PossiblyUndefinedMethod;
use Psalm\Issue\PossiblyUndefinedStringArrayOffset;
use Psalm\Issue\PossiblyUndefinedVariable;
use Psalm\Issue\PossiblyUnusedMethod;
use Psalm\Issue\PossiblyUnusedParam;
use Psalm\Issue\PossiblyUnusedProperty;
use Psalm\Issue\PossiblyUnusedReturnValue;
use Psalm\Issue\PrivateFinalMethod;
use Psalm\Issue\PropertyIssue;
use Psalm\Issue\PropertyNotSetInConstructor;
use Psalm\Issue\PropertyTypeCoercion;
use Psalm\Issue\PsalmInternalError;
use Psalm\Issue\RawObjectIteration;
use Psalm\Issue\RedundantCast;
use Psalm\Issue\RedundantCastGivenDocblockType;
use Psalm\Issue\RedundantCondition;
use Psalm\Issue\RedundantConditionGivenDocblockType;
use Psalm\Issue\RedundantFlag;
use Psalm\Issue\RedundantFunctionCall;
use Psalm\Issue\RedundantFunctionCallGivenDocblockType;
use Psalm\Issue\RedundantIdentityWithTrue;
use Psalm\Issue\RedundantPropertyInitializationCheck;
use Psalm\Issue\ReferenceConstraintViolation;
use Psalm\Issue\ReferenceReusedFromConfusingScope;
use Psalm\Issue\ReservedWord;
use Psalm\Issue\RiskyCast;
use Psalm\Issue\RiskyTruthyFalsyComparison;
use Psalm\Issue\StringIncrement;
use Psalm\Issue\TaintedCallable;
use Psalm\Issue\TaintedCookie;
use Psalm\Issue\TaintedCustom;
use Psalm\Issue\TaintedEval;
use Psalm\Issue\TaintedExtract;
use Psalm\Issue\TaintedFile;
use Psalm\Issue\TaintedHeader;
use Psalm\Issue\TaintedHtml;
use Psalm\Issue\TaintedInclude;
use Psalm\Issue\TaintedInput;
use Psalm\Issue\TaintedLdap;
use Psalm\Issue\TaintedSSRF;
use Psalm\Issue\TaintedShell;
use Psalm\Issue\TaintedSleep;
use Psalm\Issue\TaintedSql;
use Psalm\Issue\TaintedSystemSecret;
use Psalm\Issue\TaintedTextWithQuotes;
use Psalm\Issue\TaintedUnserialize;
use Psalm\Issue\TaintedUserSecret;
use Psalm\Issue\TaintedXpath;
use Psalm\Issue\TooFewArguments;
use Psalm\Issue\TooManyArguments;
use Psalm\Issue\TooManyTemplateParams;
use Psalm\Issue\Trace;
use Psalm\Issue\TraitMethodSignatureMismatch;
use Psalm\Issue\TypeDoesNotContainNull;
use Psalm\Issue\TypeDoesNotContainType;
use Psalm\Issue\UncaughtThrowInGlobalScope;
use Psalm\Issue\UndefinedAttributeClass;
use Psalm\Issue\UndefinedClass;
use Psalm\Issue\UndefinedConstant;
use Psalm\Issue\UndefinedDocblockClass;
use Psalm\Issue\UndefinedFunction;
use Psalm\Issue\UndefinedGlobalVariable;
use Psalm\Issue\UndefinedInterface;
use Psalm\Issue\UndefinedInterfaceMethod;
use Psalm\Issue\UndefinedMagicMethod;
use Psalm\Issue\UndefinedMagicPropertyAssignment;
use Psalm\Issue\UndefinedMagicPropertyFetch;
use Psalm\Issue\UndefinedMethod;
use Psalm\Issue\UndefinedPropertyAssignment;
use Psalm\Issue\UndefinedPropertyFetch;
use Psalm\Issue\UndefinedThisPropertyAssignment;
use Psalm\Issue\UndefinedThisPropertyFetch;
use Psalm\Issue\UndefinedTrace;
use Psalm\Issue\UndefinedTrait;
use Psalm\Issue\UndefinedVariable;
use Psalm\Issue\UnevaluatedCode;
use Psalm\Issue\UnhandledMatchCondition;
use Psalm\Issue\UnimplementedAbstractMethod;
use Psalm\Issue\UnimplementedInterfaceMethod;
use Psalm\Issue\UninitializedProperty;
use Psalm\Issue\UnnecessaryVarAnnotation;
use Psalm\Issue\UnrecognizedExpression;
use Psalm\Issue\UnrecognizedStatement;
use Psalm\Issue\UnresolvableConstant;
use Psalm\Issue\UnresolvableInclude;
use Psalm\Issue\UnsafeGenericInstantiation;
use Psalm\Issue\UnsafeInstantiation;
use Psalm\Issue\UnsupportedPropertyReferenceUsage;
use Psalm\Issue\UnsupportedReferenceUsage;
use Psalm\Issue\UnusedBaselineEntry;
use Psalm\Issue\UnusedClass;
use Psalm\Issue\UnusedClosureParam;
use Psalm\Issue\UnusedConstructor;
use Psalm\Issue\UnusedDocblockParam;
use Psalm\Issue\UnusedForeachValue;
use Psalm\Issue\UnusedFunctionCall;
use Psalm\Issue\UnusedIssueHandlerSuppression;
use Psalm\Issue\UnusedMethod;
use Psalm\Issue\UnusedMethodCall;
use Psalm\Issue\UnusedParam;
use Psalm\Issue\UnusedProperty;
use Psalm\Issue\UnusedPsalmSuppress;
use Psalm\Issue\UnusedReturnValue;
use Psalm\Issue\UnusedVariable;
use Psalm\Issue\VariableIssue;
use Psalm\IssueBuffer;
use Psalm\Node\Expr\AssignOp\VirtualBitwiseAnd;
use Psalm\Node\Expr\AssignOp\VirtualBitwiseOr;
use Psalm\Node\Expr\AssignOp\VirtualBitwiseXor;
use Psalm\Node\Expr\AssignOp\VirtualCoalesce;
use Psalm\Node\Expr\AssignOp\VirtualConcat;
use Psalm\Node\Expr\AssignOp\VirtualDiv;
use Psalm\Node\Expr\AssignOp\VirtualMinus;
use Psalm\Node\Expr\AssignOp\VirtualMod;
use Psalm\Node\Expr\AssignOp\VirtualMul;
use Psalm\Node\Expr\AssignOp\VirtualPlus;
use Psalm\Node\Expr\AssignOp\VirtualPow;
use Psalm\Node\Expr\AssignOp\VirtualShiftLeft;
use Psalm\Node\Expr\AssignOp\VirtualShiftRight;
use Psalm\Node\Expr\BinaryOp\VirtualBooleanAnd;
use Psalm\Node\Expr\BinaryOp\VirtualBooleanOr;
use Psalm\Node\Expr\BinaryOp\VirtualEqual;
use Psalm\Node\Expr\BinaryOp\VirtualGreater;
use Psalm\Node\Expr\BinaryOp\VirtualGreaterOrEqual;
use Psalm\Node\Expr\BinaryOp\VirtualIdentical;
use Psalm\Node\Expr\BinaryOp\VirtualLogicalAnd;
use Psalm\Node\Expr\BinaryOp\VirtualLogicalOr;
use Psalm\Node\Expr\BinaryOp\VirtualLogicalXor;
use Psalm\Node\Expr\BinaryOp\VirtualNotEqual;
use Psalm\Node\Expr\BinaryOp\VirtualNotIdentical;
use Psalm\Node\Expr\BinaryOp\VirtualSmaller;
use Psalm\Node\Expr\BinaryOp\VirtualSmallerOrEqual;
use Psalm\Node\Expr\BinaryOp\VirtualSpaceship;
use Psalm\Node\Expr\Cast\VirtualArray;
use Psalm\Node\Expr\Cast\VirtualBool;
use Psalm\Node\Expr\Cast\VirtualDouble;
use Psalm\Node\Expr\Cast\VirtualInt;
use Psalm\Node\Expr\Cast\VirtualObject;
use Psalm\Node\Expr\Cast\VirtualString;
use Psalm\Node\Expr\VirtualArrayDimFetch;
use Psalm\Node\Expr\VirtualArrowFunction;
use Psalm\Node\Expr\VirtualAssign;
use Psalm\Node\Expr\VirtualAssignRef;
use Psalm\Node\Expr\VirtualBitwiseNot;
use Psalm\Node\Expr\VirtualBooleanNot;
use Psalm\Node\Expr\VirtualClassConstFetch;
use Psalm\Node\Expr\VirtualClone;
use Psalm\Node\Expr\VirtualClosure;
use Psalm\Node\Expr\VirtualConstFetch;
use Psalm\Node\Expr\VirtualEmpty;
use Psalm\Node\Expr\VirtualError;
use Psalm\Node\Expr\VirtualErrorSuppress;
use Psalm\Node\Expr\VirtualEval;
use Psalm\Node\Expr\VirtualExit;
use Psalm\Node\Expr\VirtualFuncCall;
use Psalm\Node\Expr\VirtualInclude;
use Psalm\Node\Expr\VirtualInstanceof;
use Psalm\Node\Expr\VirtualIsset;
use Psalm\Node\Expr\VirtualList;
use Psalm\Node\Expr\VirtualMatch;
use Psalm\Node\Expr\VirtualMethodCall;
use Psalm\Node\Expr\VirtualNew;
use Psalm\Node\Expr\VirtualNullsafeMethodCall;
use Psalm\Node\Expr\VirtualNullsafePropertyFetch;
use Psalm\Node\Expr\VirtualPostDec;
use Psalm\Node\Expr\VirtualPostInc;
use Psalm\Node\Expr\VirtualPreDec;
use Psalm\Node\Expr\VirtualPreInc;
use Psalm\Node\Expr\VirtualPrint;
use Psalm\Node\Expr\VirtualPropertyFetch;
use Psalm\Node\Expr\VirtualShellExec;
use Psalm\Node\Expr\VirtualStaticCall;
use Psalm\Node\Expr\VirtualStaticPropertyFetch;
use Psalm\Node\Expr\VirtualTernary;
use Psalm\Node\Expr\VirtualThrow;
use Psalm\Node\Expr\VirtualUnaryMinus;
use Psalm\Node\Expr\VirtualUnaryPlus;
use Psalm\Node\Expr\VirtualVariable;
use Psalm\Node\Expr\VirtualYield;
use Psalm\Node\Expr\VirtualYieldFrom;
use Psalm\Node\Name\VirtualFullyQualified;
use Psalm\Node\Name\VirtualRelative;
use Psalm\Node\Scalar\MagicConst\VirtualDir;
use Psalm\Node\Scalar\MagicConst\VirtualFile;
use Psalm\Node\Scalar\MagicConst\VirtualLine;
use Psalm\Node\Scalar\MagicConst\VirtualMethod;
use Psalm\Node\Scalar\VirtualFloat;
use Psalm\Node\Scalar\VirtualInterpolatedString;
use Psalm\Node\Scalar\VirtualInterpolatedStringPart;
use Psalm\Node\Stmt\TraitUseAdaptation\VirtualAlias;
use Psalm\Node\Stmt\TraitUseAdaptation\VirtualPrecedence;
use Psalm\Node\Stmt\VirtualBreak;
use Psalm\Node\Stmt\VirtualCase;
use Psalm\Node\Stmt\VirtualCatch;
use Psalm\Node\Stmt\VirtualClass;
use Psalm\Node\Stmt\VirtualClassConst;
use Psalm\Node\Stmt\VirtualClassMethod;
use Psalm\Node\Stmt\VirtualConst;
use Psalm\Node\Stmt\VirtualContinue;
use Psalm\Node\Stmt\VirtualDeclare;
use Psalm\Node\Stmt\VirtualDeclareItem;
use Psalm\Node\Stmt\VirtualDo;
use Psalm\Node\Stmt\VirtualEcho;
use Psalm\Node\Stmt\VirtualElse;
use Psalm\Node\Stmt\VirtualElseIf;
use Psalm\Node\Stmt\VirtualExpression;
use Psalm\Node\Stmt\VirtualFinally;
use Psalm\Node\Stmt\VirtualFor;
use Psalm\Node\Stmt\VirtualForeach;
use Psalm\Node\Stmt\VirtualFunction;
use Psalm\Node\Stmt\VirtualGlobal;
use Psalm\Node\Stmt\VirtualGoto;
use Psalm\Node\Stmt\VirtualGroupUse;
use Psalm\Node\Stmt\VirtualHaltCompiler;
use Psalm\Node\Stmt\VirtualIf;
use Psalm\Node\Stmt\VirtualInlineHTML;
use Psalm\Node\Stmt\VirtualInterface;
use Psalm\Node\Stmt\VirtualLabel;
use Psalm\Node\Stmt\VirtualNamespace;
use Psalm\Node\Stmt\VirtualNop;
use Psalm\Node\Stmt\VirtualProperty;
use Psalm\Node\Stmt\VirtualReturn;
use Psalm\Node\Stmt\VirtualStatic;
use Psalm\Node\Stmt\VirtualSwitch;
use Psalm\Node\Stmt\VirtualTrait;
use Psalm\Node\Stmt\VirtualTraitUse;
use Psalm\Node\Stmt\VirtualTryCatch;
use Psalm\Node\Stmt\VirtualUnset;
use Psalm\Node\Stmt\VirtualUse;
use Psalm\Node\Stmt\VirtualWhile;
use Psalm\Node\VirtualArg;
use Psalm\Node\VirtualArrayItem;
use Psalm\Node\VirtualAttribute;
use Psalm\Node\VirtualAttributeGroup;
use Psalm\Node\VirtualClosureUse;
use Psalm\Node\VirtualIdentifier;
use Psalm\Node\VirtualMatchArm;
use Psalm\Node\VirtualName;
use Psalm\Node\VirtualNode;
use Psalm\Node\VirtualNullableType;
use Psalm\Node\VirtualParam;
use Psalm\Node\VirtualPropertyItem;
use Psalm\Node\VirtualStaticVar;
use Psalm\Node\VirtualUnionType;
use Psalm\Node\VirtualUseItem;
use Psalm\Node\VirtualVarLikeIdentifier;
use Psalm\NodeTypeProvider;
use Psalm\Plugin\ArgTypeInferer;
use Psalm\Plugin\DynamicFunctionStorage;
use Psalm\Plugin\DynamicTemplateProvider;
use Psalm\Plugin\EventHandler\AddTaintsInterface;
use Psalm\Plugin\EventHandler\AfterAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterClassLikeAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterClassLikeExistenceCheckInterface;
use Psalm\Plugin\EventHandler\AfterClassLikeVisitInterface;
use Psalm\Plugin\EventHandler\AfterCodebasePopulatedInterface;
use Psalm\Plugin\EventHandler\AfterEveryFunctionCallAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterExpressionAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterFileAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterFunctionCallAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterFunctionLikeAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterMethodCallAnalysisInterface;
use Psalm\Plugin\EventHandler\AfterStatementAnalysisInterface;
use Psalm\Plugin\EventHandler\BeforeAddIssueInterface;
use Psalm\Plugin\EventHandler\BeforeExpressionAnalysisInterface;
use Psalm\Plugin\EventHandler\BeforeFileAnalysisInterface;
use Psalm\Plugin\EventHandler\BeforeStatementAnalysisInterface;
use Psalm\Plugin\EventHandler\DynamicFunctionStorageProviderInterface;
use Psalm\Plugin\EventHandler\Event\AddRemoveTaintsEvent;
use Psalm\Plugin\EventHandler\Event\AfterAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterClassLikeAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterClassLikeExistenceCheckEvent;
use Psalm\Plugin\EventHandler\Event\AfterClassLikeVisitEvent;
use Psalm\Plugin\EventHandler\Event\AfterCodebasePopulatedEvent;
use Psalm\Plugin\EventHandler\Event\AfterEveryFunctionCallAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterExpressionAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterFileAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterFunctionCallAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterFunctionLikeAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterMethodCallAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\AfterStatementAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\BeforeAddIssueEvent;
use Psalm\Plugin\EventHandler\Event\BeforeExpressionAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\BeforeFileAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\BeforeStatementAnalysisEvent;
use Psalm\Plugin\EventHandler\Event\DynamicFunctionStorageProviderEvent;
use Psalm\Plugin\EventHandler\Event\FunctionExistenceProviderEvent;
use Psalm\Plugin\EventHandler\Event\FunctionParamsProviderEvent;
use Psalm\Plugin\EventHandler\Event\FunctionReturnTypeProviderEvent;
use Psalm\Plugin\EventHandler\Event\MethodExistenceProviderEvent;
use Psalm\Plugin\EventHandler\Event\MethodParamsProviderEvent;
use Psalm\Plugin\EventHandler\Event\MethodReturnTypeProviderEvent;
use Psalm\Plugin\EventHandler\Event\MethodVisibilityProviderEvent;
use Psalm\Plugin\EventHandler\Event\PropertyExistenceProviderEvent;
use Psalm\Plugin\EventHandler\Event\PropertyTypeProviderEvent;
use Psalm\Plugin\EventHandler\Event\PropertyVisibilityProviderEvent;
use Psalm\Plugin\EventHandler\Event\StringInterpreterEvent;
use Psalm\Plugin\EventHandler\FunctionExistenceProviderInterface;
use Psalm\Plugin\EventHandler\FunctionParamsProviderInterface;
use Psalm\Plugin\EventHandler\FunctionReturnTypeProviderInterface;
use Psalm\Plugin\EventHandler\MethodExistenceProviderInterface;
use Psalm\Plugin\EventHandler\MethodParamsProviderInterface;
use Psalm\Plugin\EventHandler\MethodReturnTypeProviderInterface;
use Psalm\Plugin\EventHandler\MethodVisibilityProviderInterface;
use Psalm\Plugin\EventHandler\PropertyExistenceProviderInterface;
use Psalm\Plugin\EventHandler\PropertyTypeProviderInterface;
use Psalm\Plugin\EventHandler\PropertyVisibilityProviderInterface;
use Psalm\Plugin\EventHandler\RemoveTaintsInterface;
use Psalm\Plugin\EventHandler\StringInterpreterInterface;
use Psalm\Plugin\FileExtensionsInterface;
use Psalm\Plugin\PluginEntryPointInterface;
use Psalm\Plugin\PluginFileExtensionsInterface;
use Psalm\Plugin\PluginInterface;
use Psalm\Plugin\RegistrationInterface;
use Psalm\Plugin\Shepherd;
use Psalm\PluginFileExtensionsSocket;
use Psalm\PluginRegistrationSocket;
use Psalm\Progress\DebugProgress;
use Psalm\Progress\DefaultProgress;
use Psalm\Progress\LongProgress;
use Psalm\Progress\Progress;
use Psalm\Progress\VoidProgress;
use Psalm\Report;
use Psalm\Report\ByIssueLevelAndTypeReport;
use Psalm\Report\CheckstyleReport;
use Psalm\Report\CodeClimateReport;
use Psalm\Report\CompactReport;
use Psalm\Report\ConsoleReport;
use Psalm\Report\CountReport;
use Psalm\Report\EmacsReport;
use Psalm\Report\GithubActionsReport;
use Psalm\Report\JsonReport;
use Psalm\Report\JsonSummaryReport;
use Psalm\Report\JunitReport;
use Psalm\Report\PhpStormReport;
use Psalm\Report\PylintReport;
use Psalm\Report\ReportOptions;
use Psalm\Report\SarifReport;
use Psalm\Report\SonarqubeReport;
use Psalm\Report\TextReport;
use Psalm\Report\XmlReport;
use Psalm\SourceControl\Git\CommitInfo;
use Psalm\SourceControl\Git\GitInfo;
use Psalm\SourceControl\Git\RemoteInfo;
use Psalm\SourceControl\SourceControlInfo;
use Psalm\StatementsSource;
use Psalm\Storage\Assertion;
use Psalm\Storage\Assertion\Any;
use Psalm\Storage\Assertion\ArrayKeyDoesNotExist;
use Psalm\Storage\Assertion\ArrayKeyExists;
use Psalm\Storage\Assertion\DoesNotHaveAtLeastCount;
use Psalm\Storage\Assertion\DoesNotHaveExactCount;
use Psalm\Storage\Assertion\DoesNotHaveMethod;
use Psalm\Storage\Assertion\Falsy;
use Psalm\Storage\Assertion\HasArrayKey;
use Psalm\Storage\Assertion\HasAtLeastCount;
use Psalm\Storage\Assertion\HasExactCount;
use Psalm\Storage\Assertion\HasIntOrStringArrayAccess;
use Psalm\Storage\Assertion\HasMethod;
use Psalm\Storage\Assertion\HasStringArrayAccess;
use Psalm\Storage\Assertion\InArray;
use Psalm\Storage\Assertion\IsAClass;
use Psalm\Storage\Assertion\IsClassEqual;
use Psalm\Storage\Assertion\IsClassNotEqual;
use Psalm\Storage\Assertion\IsCountable;
use Psalm\Storage\Assertion\IsEqualIsset;
use Psalm\Storage\Assertion\IsGreaterThan;
use Psalm\Storage\Assertion\IsGreaterThanOrEqualTo;
use Psalm\Storage\Assertion\IsIdentical;
use Psalm\Storage\Assertion\IsIsset;
use Psalm\Storage\Assertion\IsLessThan;
use Psalm\Storage\Assertion\IsLessThanOrEqualTo;
use Psalm\Storage\Assertion\IsLooselyEqual;
use Psalm\Storage\Assertion\IsNotAClass;
use Psalm\Storage\Assertion\IsNotCountable;
use Psalm\Storage\Assertion\IsNotIdentical;
use Psalm\Storage\Assertion\IsNotIsset;
use Psalm\Storage\Assertion\IsNotLooselyEqual;
use Psalm\Storage\Assertion\IsNotType;
use Psalm\Storage\Assertion\IsType;
use Psalm\Storage\Assertion\NestedAssertions;
use Psalm\Storage\Assertion\NonEmpty;
use Psalm\Storage\Assertion\NonEmptyCountable;
use Psalm\Storage\Assertion\NotInArray;
use Psalm\Storage\Assertion\NotNestedAssertions;
use Psalm\Storage\Assertion\NotNonEmptyCountable;
use Psalm\Storage\Assertion\Truthy;
use Psalm\Storage\AttributeArg;
use Psalm\Storage\AttributeStorage;
use Psalm\Storage\ClassConstantStorage;
use Psalm\Storage\ClassLikeStorage;
use Psalm\Storage\CustomMetadataTrait;
use Psalm\Storage\EnumCaseStorage;
use Psalm\Storage\FileStorage;
use Psalm\Storage\FunctionLikeParameter;
use Psalm\Storage\FunctionLikeStorage;
use Psalm\Storage\FunctionStorage;
use Psalm\Storage\HasAttributesInterface;
use Psalm\Storage\ImmutableNonCloneableTrait;
use Psalm\Storage\MethodStorage;
use Psalm\Storage\Possibilities;
use Psalm\Storage\PropertyStorage;
use Psalm\Storage\UnserializeMemoryUsageSuppressionTrait;
use Psalm\Type;
use Psalm\Type\Atomic;
use Psalm\Type\Atomic\CallableTrait;
use Psalm\Type\Atomic\DependentType;
use Psalm\Type\Atomic\GenericTrait;
use Psalm\Type\Atomic\HasIntersectionTrait;
use Psalm\Type\Atomic\TAnonymousClassInstance;
use Psalm\Type\Atomic\TArray;
use Psalm\Type\Atomic\TArrayKey;
use Psalm\Type\Atomic\TBool;
use Psalm\Type\Atomic\TCallable;
use Psalm\Type\Atomic\TCallableInterface;
use Psalm\Type\Atomic\TCallableKeyedArray;
use Psalm\Type\Atomic\TCallableObject;
use Psalm\Type\Atomic\TCallableString;
use Psalm\Type\Atomic\TClassConstant;
use Psalm\Type\Atomic\TClassString;
use Psalm\Type\Atomic\TClassStringMap;
use Psalm\Type\Atomic\TClosedResource;
use Psalm\Type\Atomic\TClosure;
use Psalm\Type\Atomic\TConditional;
use Psalm\Type\Atomic\TDependentGetClass;
use Psalm\Type\Atomic\TDependentGetDebugType;
use Psalm\Type\Atomic\TDependentGetType;
use Psalm\Type\Atomic\TEmptyMixed;
use Psalm\Type\Atomic\TEmptyNumeric;
use Psalm\Type\Atomic\TEmptyScalar;
use Psalm\Type\Atomic\TEnumCase;
use Psalm\Type\Atomic\TFalse;
use Psalm\Type\Atomic\TFloat;
use Psalm\Type\Atomic\TGenericObject;
use Psalm\Type\Atomic\TInt;
use Psalm\Type\Atomic\TIntMask;
use Psalm\Type\Atomic\TIntMaskOf;
use Psalm\Type\Atomic\TIntRange;
use Psalm\Type\Atomic\TIterable;
use Psalm\Type\Atomic\TKeyOf;
use Psalm\Type\Atomic\TKeyedArray;
use Psalm\Type\Atomic\TLiteralClassString;
use Psalm\Type\Atomic\TLiteralFloat;
use Psalm\Type\Atomic\TLiteralInt;
use Psalm\Type\Atomic\TLiteralString;
use Psalm\Type\Atomic\TLowercaseString;
use Psalm\Type\Atomic\TMixed;
use Psalm\Type\Atomic\TNamedObject;
use Psalm\Type\Atomic\TNever;
use Psalm\Type\Atomic\TNonEmptyArray;
use Psalm\Type\Atomic\TNonEmptyLowercaseString;
use Psalm\Type\Atomic\TNonEmptyMixed;
use Psalm\Type\Atomic\TNonEmptyNonspecificLiteralString;
use Psalm\Type\Atomic\TNonEmptyScalar;
use Psalm\Type\Atomic\TNonEmptyString;
use Psalm\Type\Atomic\TNonFalsyString;
use Psalm\Type\Atomic\TNonspecificLiteralInt;
use Psalm\Type\Atomic\TNonspecificLiteralString;
use Psalm\Type\Atomic\TNull;
use Psalm\Type\Atomic\TNumeric;
use Psalm\Type\Atomic\TNumericString;
use Psalm\Type\Atomic\TObject;
use Psalm\Type\Atomic\TObjectWithProperties;
use Psalm\Type\Atomic\TPropertiesOf;
use Psalm\Type\Atomic\TResource;
use Psalm\Type\Atomic\TScalar;
use Psalm\Type\Atomic\TSingleLetter;
use Psalm\Type\Atomic\TString;
use Psalm\Type\Atomic\TTemplateIndexedAccess;
use Psalm\Type\Atomic\TTemplateKeyOf;
use Psalm\Type\Atomic\TTemplateParam;
use Psalm\Type\Atomic\TTemplateParamClass;
use Psalm\Type\Atomic\TTemplatePropertiesOf;
use Psalm\Type\Atomic\TTemplateValueOf;
use Psalm\Type\Atomic\TTraitString;
use Psalm\Type\Atomic\TTrue;
use Psalm\Type\Atomic\TTypeAlias;
use Psalm\Type\Atomic\TUnknownClassString;
use Psalm\Type\Atomic\TValueOf;
use Psalm\Type\Atomic\TVoid;
use Psalm\Type\MutableTypeVisitor;
use Psalm\Type\MutableUnion;
use Psalm\Type\Reconciler;
use Psalm\Type\TaintKind;
use Psalm\Type\TaintKindGroup;
use Psalm\Type\TypeNode;
use Psalm\Type\TypeVisitor;
use Psalm\Type\Union;
use Psalm\Type\UnionTrait;

use function class_exists;

/** @internal */
final class Preloader
{
    private static bool $preloaded = false;
    public static function preload(): void
    {
        if (self::$preloaded) {
            return;
        }
        class_exists(Builder::class);
        class_exists(BuilderFactory::class);
        class_exists(BuilderHelpers::class);
        class_exists(Comment::class);
        class_exists(ConstExprEvaluationException::class);
        class_exists(ConstExprEvaluator::class);
        class_exists(Error::class);
        class_exists(ErrorHandler::class);
        class_exists(JsonDecoder::class);
        class_exists(Lexer::class);
        class_exists(Modifiers::class);
        class_exists(NameContext::class);
        class_exists(Node::class);
        class_exists(NodeAbstract::class);
        class_exists(NodeDumper::class);
        class_exists(NodeFinder::class);
        class_exists(NodeTraverser::class);
        class_exists(NodeTraverserInterface::class);
        class_exists(NodeVisitor::class);
        class_exists(NodeVisitorAbstract::class);
        class_exists(Parser::class);
        class_exists(ParserAbstract::class);
        class_exists(ParserFactory::class);
        class_exists(PhpVersion::class);
        class_exists(PrettyPrinter::class);
        class_exists(PrettyPrinterAbstract::class);
        class_exists(Token::class);
        class_exists(ClassConst::class);
        class_exists(Class_::class);
        class_exists(Declaration::class);
        class_exists(EnumCase::class);
        class_exists(Enum_::class);
        class_exists(FunctionLike::class);
        class_exists(Function_::class);
        class_exists(Interface_::class);
        class_exists(Method::class);
        class_exists(Namespace_::class);
        class_exists(Param::class);
        class_exists(Property::class);
        class_exists(TraitUse::class);
        class_exists(TraitUseAdaptation::class);
        class_exists(Trait_::class);
        class_exists(Use_::class);
        class_exists(Doc::class);
        class_exists(Collecting::class);
        class_exists(Throwing::class);
        class_exists(DiffElem::class);
        class_exists(Differ::class);
        class_exists(PrintableNewAnonClassNode::class);
        class_exists(TokenPolyfill::class);
        class_exists(TokenStream::class);
        class_exists(Emulative::class);
        class_exists(AsymmetricVisibilityTokenEmulator::class);
        class_exists(AttributeEmulator::class);
        class_exists(EnumTokenEmulator::class);
        class_exists(ExplicitOctalEmulator::class);
        class_exists(KeywordEmulator::class);
        class_exists(MatchTokenEmulator::class);
        class_exists(NullsafeTokenEmulator::class);
        class_exists(PropertyTokenEmulator::class);
        class_exists(ReadonlyFunctionTokenEmulator::class);
        class_exists(ReadonlyTokenEmulator::class);
        class_exists(ReverseEmulator::class);
        class_exists(TokenEmulator::class);
        class_exists(Arg::class);
        class_exists(ArrayItem::class);
        class_exists(Attribute::class);
        class_exists(AttributeGroup::class);
        class_exists(ClosureUse::class);
        class_exists(ComplexType::class);
        class_exists(Const_::class);
        class_exists(DeclareItem::class);
        class_exists(Expr::class);
        class_exists(\PhpParser\Node\FunctionLike::class);
        class_exists(Identifier::class);
        class_exists(InterpolatedStringPart::class);
        class_exists(IntersectionType::class);
        class_exists(MatchArm::class);
        class_exists(Name::class);
        class_exists(NullableType::class);
        class_exists(\PhpParser\Node\Param::class);
        class_exists(PropertyHook::class);
        class_exists(PropertyItem::class);
        class_exists(Scalar::class);
        class_exists(StaticVar::class);
        class_exists(Stmt::class);
        class_exists(UnionType::class);
        class_exists(UseItem::class);
        class_exists(VarLikeIdentifier::class);
        class_exists(VariadicPlaceholder::class);
        class_exists(ArrayDimFetch::class);
        class_exists(\PhpParser\Node\Expr\ArrayItem::class);
        class_exists(Array_::class);
        class_exists(ArrowFunction::class);
        class_exists(Assign::class);
        class_exists(AssignOp::class);
        class_exists(AssignRef::class);
        class_exists(BinaryOp::class);
        class_exists(BitwiseNot::class);
        class_exists(BooleanNot::class);
        class_exists(CallLike::class);
        class_exists(Cast::class);
        class_exists(ClassConstFetch::class);
        class_exists(Clone_::class);
        class_exists(Closure::class);
        class_exists(\PhpParser\Node\Expr\ClosureUse::class);
        class_exists(ConstFetch::class);
        class_exists(Empty_::class);
        class_exists(\PhpParser\Node\Expr\Error::class);
        class_exists(ErrorSuppress::class);
        class_exists(Eval_::class);
        class_exists(Exit_::class);
        class_exists(FuncCall::class);
        class_exists(Include_::class);
        class_exists(Instanceof_::class);
        class_exists(Isset_::class);
        class_exists(List_::class);
        class_exists(Match_::class);
        class_exists(MethodCall::class);
        class_exists(New_::class);
        class_exists(NullsafeMethodCall::class);
        class_exists(NullsafePropertyFetch::class);
        class_exists(PostDec::class);
        class_exists(PostInc::class);
        class_exists(PreDec::class);
        class_exists(PreInc::class);
        class_exists(Print_::class);
        class_exists(PropertyFetch::class);
        class_exists(ShellExec::class);
        class_exists(StaticCall::class);
        class_exists(StaticPropertyFetch::class);
        class_exists(Ternary::class);
        class_exists(Throw_::class);
        class_exists(UnaryMinus::class);
        class_exists(UnaryPlus::class);
        class_exists(Variable::class);
        class_exists(YieldFrom::class);
        class_exists(Yield_::class);
        class_exists(BitwiseAnd::class);
        class_exists(BitwiseOr::class);
        class_exists(BitwiseXor::class);
        class_exists(Coalesce::class);
        class_exists(Concat::class);
        class_exists(Div::class);
        class_exists(Minus::class);
        class_exists(Mod::class);
        class_exists(Mul::class);
        class_exists(Plus::class);
        class_exists(Pow::class);
        class_exists(ShiftLeft::class);
        class_exists(ShiftRight::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\BitwiseAnd::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\BitwiseOr::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\BitwiseXor::class);
        class_exists(BooleanAnd::class);
        class_exists(BooleanOr::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Coalesce::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Concat::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Div::class);
        class_exists(Equal::class);
        class_exists(Greater::class);
        class_exists(GreaterOrEqual::class);
        class_exists(Identical::class);
        class_exists(LogicalAnd::class);
        class_exists(LogicalOr::class);
        class_exists(LogicalXor::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Minus::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Mod::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Mul::class);
        class_exists(NotEqual::class);
        class_exists(NotIdentical::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Plus::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\Pow::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\ShiftLeft::class);
        class_exists(\PhpParser\Node\Expr\BinaryOp\ShiftRight::class);
        class_exists(Smaller::class);
        class_exists(SmallerOrEqual::class);
        class_exists(Spaceship::class);
        class_exists(\PhpParser\Node\Expr\Cast\Array_::class);
        class_exists(Bool_::class);
        class_exists(Double::class);
        class_exists(Int_::class);
        class_exists(Object_::class);
        class_exists(String_::class);
        class_exists(Unset_::class);
        class_exists(FullyQualified::class);
        class_exists(Relative::class);
        class_exists(DNumber::class);
        class_exists(Encapsed::class);
        class_exists(EncapsedStringPart::class);
        class_exists(Float_::class);
        class_exists(\PhpParser\Node\Scalar\Int_::class);
        class_exists(InterpolatedString::class);
        class_exists(LNumber::class);
        class_exists(MagicConst::class);
        class_exists(\PhpParser\Node\Scalar\String_::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Class_::class);
        class_exists(Dir::class);
        class_exists(File::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Function_::class);
        class_exists(Line::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Method::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Namespace_::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Property::class);
        class_exists(\PhpParser\Node\Scalar\MagicConst\Trait_::class);
        class_exists(Block::class);
        class_exists(Break_::class);
        class_exists(Case_::class);
        class_exists(Catch_::class);
        class_exists(\PhpParser\Node\Stmt\ClassConst::class);
        class_exists(ClassLike::class);
        class_exists(ClassMethod::class);
        class_exists(\PhpParser\Node\Stmt\Class_::class);
        class_exists(\PhpParser\Node\Stmt\Const_::class);
        class_exists(Continue_::class);
        class_exists(DeclareDeclare::class);
        class_exists(Declare_::class);
        class_exists(Do_::class);
        class_exists(Echo_::class);
        class_exists(ElseIf_::class);
        class_exists(Else_::class);
        class_exists(\PhpParser\Node\Stmt\EnumCase::class);
        class_exists(\PhpParser\Node\Stmt\Enum_::class);
        class_exists(Expression::class);
        class_exists(Finally_::class);
        class_exists(For_::class);
        class_exists(Foreach_::class);
        class_exists(\PhpParser\Node\Stmt\Function_::class);
        class_exists(Global_::class);
        class_exists(Goto_::class);
        class_exists(GroupUse::class);
        class_exists(HaltCompiler::class);
        class_exists(If_::class);
        class_exists(InlineHTML::class);
        class_exists(\PhpParser\Node\Stmt\Interface_::class);
        class_exists(Label::class);
        class_exists(\PhpParser\Node\Stmt\Namespace_::class);
        class_exists(Nop::class);
        class_exists(\PhpParser\Node\Stmt\Property::class);
        class_exists(PropertyProperty::class);
        class_exists(Return_::class);
        class_exists(\PhpParser\Node\Stmt\StaticVar::class);
        class_exists(Static_::class);
        class_exists(Switch_::class);
        class_exists(\PhpParser\Node\Stmt\TraitUse::class);
        class_exists(\PhpParser\Node\Stmt\TraitUseAdaptation::class);
        class_exists(\PhpParser\Node\Stmt\Trait_::class);
        class_exists(TryCatch::class);
        class_exists(\PhpParser\Node\Stmt\Unset_::class);
        class_exists(UseUse::class);
        class_exists(\PhpParser\Node\Stmt\Use_::class);
        class_exists(While_::class);
        class_exists(Alias::class);
        class_exists(Precedence::class);
        class_exists(CloningVisitor::class);
        class_exists(CommentAnnotatingVisitor::class);
        class_exists(FindingVisitor::class);
        class_exists(FirstFindingVisitor::class);
        class_exists(NameResolver::class);
        class_exists(NodeConnectingVisitor::class);
        class_exists(ParentConnectingVisitor::class);
        class_exists(Php7::class);
        class_exists(Php8::class);
        class_exists(Standard::class);
        class_exists(Type::class);
        class_exists(DocComment::class);
        class_exists(DefaultProgress::class);
        class_exists(Progress::class);
        class_exists(DebugProgress::class);
        class_exists(LongProgress::class);
        class_exists(VoidProgress::class);
        class_exists(FileManipulation::class);
        class_exists(DocblockTypeLocation::class);
        class_exists(Raw::class);
        class_exists(ParseErrorLocation::class);
        class_exists(ErrorLevelFileFilter::class);
        class_exists(TaintAnalysisFileFilter::class);
        class_exists(FileFilter::class);
        class_exists(ProjectFileFilter::class);
        class_exists(Creator::class);
        class_exists(IssueHandler::class);
        class_exists(ArgTypeInferer::class);
        class_exists(Shepherd::class);
        class_exists(PluginInterface::class);
        class_exists(DynamicTemplateProvider::class);
        class_exists(RegistrationInterface::class);
        class_exists(MethodVisibilityProviderInterface::class);
        class_exists(AfterMethodCallAnalysisInterface::class);
        class_exists(FunctionReturnTypeProviderInterface::class);
        class_exists(PropertyExistenceProviderInterface::class);
        class_exists(AfterFunctionLikeAnalysisInterface::class);
        class_exists(MethodReturnTypeProviderInterface::class);
        class_exists(BeforeExpressionAnalysisInterface::class);
        class_exists(BeforeAddIssueInterface::class);
        class_exists(PropertyTypeProviderInterface::class);
        class_exists(AfterCodebasePopulatedInterface::class);
        class_exists(AfterClassLikeVisitInterface::class);
        class_exists(MethodExistenceProviderInterface::class);
        class_exists(AfterAnalysisInterface::class);
        class_exists(AfterFunctionCallAnalysisInterface::class);
        class_exists(AfterStatementAnalysisInterface::class);
        class_exists(AfterClassLikeAnalysisInterface::class);
        class_exists(DynamicFunctionStorageProviderInterface::class);
        class_exists(FunctionExistenceProviderInterface::class);
        class_exists(RemoveTaintsInterface::class);
        class_exists(StringInterpreterInterface::class);
        class_exists(AfterFileAnalysisInterface::class);
        class_exists(AfterEveryFunctionCallAnalysisInterface::class);
        class_exists(MethodParamsProviderInterface::class);
        class_exists(AddTaintsInterface::class);
        class_exists(AfterExpressionAnalysisInterface::class);
        class_exists(AfterClassLikeExistenceCheckInterface::class);
        class_exists(PropertyVisibilityProviderInterface::class);
        class_exists(BeforeFileAnalysisInterface::class);
        class_exists(AfterStatementAnalysisEvent::class);
        class_exists(AfterCodebasePopulatedEvent::class);
        class_exists(MethodReturnTypeProviderEvent::class);
        class_exists(BeforeFileAnalysisEvent::class);
        class_exists(AfterExpressionAnalysisEvent::class);
        class_exists(MethodVisibilityProviderEvent::class);
        class_exists(BeforeAddIssueEvent::class);
        class_exists(AfterClassLikeAnalysisEvent::class);
        class_exists(DynamicFunctionStorageProviderEvent::class);
        class_exists(FunctionReturnTypeProviderEvent::class);
        class_exists(AfterClassLikeVisitEvent::class);
        class_exists(BeforeStatementAnalysisEvent::class);
        class_exists(MethodParamsProviderEvent::class);
        class_exists(MethodExistenceProviderEvent::class);
        class_exists(AfterFunctionCallAnalysisEvent::class);
        class_exists(AfterClassLikeExistenceCheckEvent::class);
        class_exists(PropertyVisibilityProviderEvent::class);
        class_exists(AfterFunctionLikeAnalysisEvent::class);
        class_exists(PropertyTypeProviderEvent::class);
        class_exists(AfterMethodCallAnalysisEvent::class);
        class_exists(BeforeExpressionAnalysisEvent::class);
        class_exists(AddRemoveTaintsEvent::class);
        class_exists(FunctionParamsProviderEvent::class);
        class_exists(AfterFileAnalysisEvent::class);
        class_exists(StringInterpreterEvent::class);
        class_exists(FunctionExistenceProviderEvent::class);
        class_exists(AfterEveryFunctionCallAnalysisEvent::class);
        class_exists(PropertyExistenceProviderEvent::class);
        class_exists(AfterAnalysisEvent::class);
        class_exists(BeforeStatementAnalysisInterface::class);
        class_exists(FunctionParamsProviderInterface::class);
        class_exists(DynamicFunctionStorage::class);
        class_exists(PluginEntryPointInterface::class);
        class_exists(FileExtensionsInterface::class);
        class_exists(PluginFileExtensionsInterface::class);
        class_exists(TaintSink::class);
        class_exists(DataFlowNode::class);
        class_exists(TaintSource::class);
        class_exists(Path::class);
        class_exists(ClassLikeStubGenerator::class);
        class_exists(StubsGenerator::class);
        class_exists(ContainsClassLikeVisitor::class);
        class_exists(ContainsStaticVisitor::class);
        class_exists(FromDocblockSetter::class);
        class_exists(CanContainObjectTypeVisitor::class);
        class_exists(ClasslikeReplacer::class);
        class_exists(TypeScanner::class);
        class_exists(TypeLocalizer::class);
        class_exists(TypeChecker::class);
        class_exists(TemplateTypeCollector::class);
        class_exists(ContainsLiteralVisitor::class);
        class_exists(ShutdownScannerTask::class);
        class_exists(InitScannerTask::class);
        class_exists(IgbinarySerializer::class);
        class_exists(ScannerTask::class);
        class_exists(AnalyzerTask::class);
        class_exists(InitAnalyzerTask::class);
        class_exists(Pool::class);
        class_exists(PsalmRestarter::class);
        class_exists(ShutdownAnalyzerTask::class);
        class_exists(ForkContext::class);
        class_exists(CheckTrivialExprVisitor::class);
        class_exists(PartialParserVisitor::class);
        class_exists(TypeMappingVisitor::class);
        class_exists(ClassLikeNodeScanner::class);
        class_exists(FunctionLikeNodeScanner::class);
        class_exists(ExpressionResolver::class);
        class_exists(FunctionLikeDocblockScanner::class);
        class_exists(AttributeResolver::class);
        class_exists(ExpressionScanner::class);
        class_exists(TypeHintResolver::class);
        class_exists(FunctionLikeDocblockParser::class);
        class_exists(ClassLikeDocblockParser::class);
        class_exists(TraitFinder::class);
        class_exists(NodeCleanerVisitor::class);
        class_exists(SimpleNameResolver::class);
        class_exists(OffsetShifterVisitor::class);
        class_exists(ReflectorVisitor::class);
        class_exists(NodeCounterVisitor::class);
        class_exists(ParamReplacementVisitor::class);
        class_exists(ShortClosureVisitor::class);
        class_exists(ConditionCloningVisitor::class);
        class_exists(\Psalm\Internal\PhpVisitor\CloningVisitor::class);
        class_exists(AssignmentMapVisitor::class);
        class_exists(YieldTypeCollector::class);
        class_exists(IdGenerator::class);
        class_exists(\Psalm\Internal\LanguageServer\Progress::class);
        class_exists(ProtocolWriter::class);
        class_exists(LanguageClient::class);
        class_exists(PathMapper::class);
        class_exists(EmitterTrait::class);
        class_exists(Reference::class);
        class_exists(FileReferenceCacheProvider::class);
        class_exists(ClassLikeStorageCacheProvider::class);
        class_exists(FileStorageCacheProvider::class);
        class_exists(ParserCacheProvider::class);
        class_exists(ProjectCacheProvider::class);
        class_exists(TextDocument::class);
        class_exists(Workspace::class);
        class_exists(ProtocolReader::class);
        class_exists(EmitterInterface::class);
        class_exists(PHPMarkdownContent::class);
        class_exists(ProtocolStreamReader::class);
        class_exists(ClientHandler::class);
        class_exists(\Psalm\Internal\LanguageServer\Client\TextDocument::class);
        class_exists(LegacyProgress::class);
        class_exists(\Psalm\Internal\LanguageServer\Client\Progress\Progress::class);
        class_exists(ProgressInterface::class);
        class_exists(\Psalm\Internal\LanguageServer\Client\Workspace::class);
        class_exists(LanguageServer::class);
        class_exists(Message::class);
        class_exists(ClientConfiguration::class);
        class_exists(ProtocolStreamWriter::class);
        class_exists(CliUtils::class);
        class_exists(MethodIdentifier::class);
        class_exists(VersionUtils::class);
        class_exists(Cache::class);
        class_exists(CustomTraverser::class);
        class_exists(RuntimeCaches::class);
        class_exists(\Psalm\Internal\Provider\FileReferenceCacheProvider::class);
        class_exists(PropertyExistenceProvider::class);
        class_exists(\Psalm\Internal\Provider\ClassLikeStorageCacheProvider::class);
        class_exists(\Psalm\Internal\Provider\FileStorageCacheProvider::class);
        class_exists(FunctionExistenceProvider::class);
        class_exists(FileProvider::class);
        class_exists(ArrayCombineReturnTypeProvider::class);
        class_exists(ArraySpliceReturnTypeProvider::class);
        class_exists(ArrayReverseReturnTypeProvider::class);
        class_exists(DateReturnTypeProvider::class);
        class_exists(RoundReturnTypeProvider::class);
        class_exists(FilterUtils::class);
        class_exists(ArrayMapReturnTypeProvider::class);
        class_exists(ArraySliceReturnTypeProvider::class);
        class_exists(ArrayChunkReturnTypeProvider::class);
        class_exists(ParseUrlReturnTypeProvider::class);
        class_exists(GetObjectVarsReturnTypeProvider::class);
        class_exists(TriggerErrorReturnTypeProvider::class);
        class_exists(IteratorToArrayReturnTypeProvider::class);
        class_exists(ArrayFillKeysReturnTypeProvider::class);
        class_exists(MktimeReturnTypeProvider::class);
        class_exists(ImagickPixelColorReturnTypeProvider::class);
        class_exists(InArrayReturnTypeProvider::class);
        class_exists(ArrayPointerAdjustmentReturnTypeProvider::class);
        class_exists(StrReplaceReturnTypeProvider::class);
        class_exists(BasenameReturnTypeProvider::class);
        class_exists(FilterVarReturnTypeProvider::class);
        class_exists(StrTrReturnTypeProvider::class);
        class_exists(GetClassMethodsReturnTypeProvider::class);
        class_exists(DateTimeModifyReturnTypeProvider::class);
        class_exists(ArrayPopReturnTypeProvider::class);
        class_exists(PdoStatementSetFetchMode::class);
        class_exists(ArrayReduceReturnTypeProvider::class);
        class_exists(PdoStatementReturnTypeProvider::class);
        class_exists(ClosureFromCallableReturnTypeProvider::class);
        class_exists(ArrayRandReturnTypeProvider::class);
        class_exists(ArrayMergeReturnTypeProvider::class);
        class_exists(MinMaxReturnTypeProvider::class);
        class_exists(VersionCompareReturnTypeProvider::class);
        class_exists(FirstArgStringReturnTypeProvider::class);
        class_exists(DirnameReturnTypeProvider::class);
        class_exists(ArrayPadReturnTypeProvider::class);
        class_exists(PowReturnTypeProvider::class);
        class_exists(ArrayFillReturnTypeProvider::class);
        class_exists(SprintfReturnTypeProvider::class);
        class_exists(FilterInputReturnTypeProvider::class);
        class_exists(MbInternalEncodingReturnTypeProvider::class);
        class_exists(ArrayColumnReturnTypeProvider::class);
        class_exists(DomNodeAppendChild::class);
        class_exists(HexdecReturnTypeProvider::class);
        class_exists(RandReturnTypeProvider::class);
        class_exists(ArrayFilterReturnTypeProvider::class);
        class_exists(MethodExistenceProvider::class);
        class_exists(FileStorageProvider::class);
        class_exists(FakeFileProvider::class);
        class_exists(PropertyTypeProvider::class);
        class_exists(ArrayMultisortParamsProvider::class);
        class_exists(ArrayUArrayParamsProvider::class);
        class_exists(ArrayFilterParamsProvider::class);
        class_exists(FileReferenceProvider::class);
        class_exists(StatementsProvider::class);
        class_exists(MethodVisibilityProvider::class);
        class_exists(MethodReturnTypeProvider::class);
        class_exists(HtmlFunctionTainter::class);
        class_exists(DomDocumentPropertyTypeProvider::class);
        class_exists(MethodParamsProvider::class);
        class_exists(FunctionReturnTypeProvider::class);
        class_exists(NodeDataProvider::class);
        class_exists(Providers::class);
        class_exists(FunctionParamsProvider::class);
        class_exists(\Psalm\Internal\Provider\ParserCacheProvider::class);
        class_exists(ClassLikeStorageProvider::class);
        class_exists(\Psalm\Internal\Provider\ProjectCacheProvider::class);
        class_exists(DynamicFunctionStorageProvider::class);
        class_exists(PropertyVisibilityProvider::class);
        class_exists(NamespaceStatementsDiffer::class);
        class_exists(\Psalm\Internal\Diff\DiffElem::class);
        class_exists(ClassStatementsDiffer::class);
        class_exists(FileStatementsDiffer::class);
        class_exists(AstDiffer::class);
        class_exists(FileDiffer::class);
        class_exists(Algebra::class);
        class_exists(LoopScope::class);
        class_exists(SwitchScope::class);
        class_exists(CaseScope::class);
        class_exists(IfConditionalScope::class);
        class_exists(FinallyScope::class);
        class_exists(IfScope::class);
        class_exists(Review::class);
        class_exists(Refactor::class);
        class_exists(Plugin::class);
        class_exists(\Psalm\Internal\Cli\LanguageServer::class);
        class_exists(Psalter::class);
        class_exists(Psalm::class);
        class_exists(EventDispatcher::class);
        class_exists(self::class);
        class_exists(SystemCommandExecutor::class);
        class_exists(GitInfoCollector::class);
        class_exists(BuildInfoCollector::class);
        class_exists(Composer::class);
        class_exists(Json::class);
        class_exists(TemplateBound::class);
        class_exists(TemplateStandinTypeReplacer::class);
        class_exists(AtomicTypeComparator::class);
        class_exists(ScalarTypeComparator::class);
        class_exists(ObjectComparator::class);
        class_exists(ClassLikeStringComparator::class);
        class_exists(ArrayTypeComparator::class);
        class_exists(GenericTypeComparator::class);
        class_exists(TypeComparisonResult::class);
        class_exists(KeyedArrayComparator::class);
        class_exists(IntegerRangeComparator::class);
        class_exists(CallableTypeComparator::class);
        class_exists(UnionTypeComparator::class);
        class_exists(SimpleAssertionReconciler::class);
        class_exists(TypeTokenizer::class);
        class_exists(TypeCombination::class);
        class_exists(ClassTypeAlias::class);
        class_exists(LinkableTypeAlias::class);
        class_exists(InlineTypeAlias::class);
        class_exists(TypeAlias::class);
        class_exists(SimpleNegatedAssertionReconciler::class);
        class_exists(ClosedInheritanceToUnion::class);
        class_exists(ParseTree::class);
        class_exists(TemplateInferredTypeReplacer::class);
        class_exists(TemplateResult::class);
        class_exists(TypeCombiner::class);
        class_exists(ArrayType::class);
        class_exists(NegatedAssertionReconciler::class);
        class_exists(TypeParser::class);
        class_exists(ParseTreeCreator::class);
        class_exists(EncapsulationTree::class);
        class_exists(CallableTree::class);
        class_exists(CallableWithReturnTypeTree::class);
        class_exists(UnionTree::class);
        class_exists(ConditionalTree::class);
        class_exists(KeyedArrayTree::class);
        class_exists(KeyedArrayPropertyTree::class);
        class_exists(TemplateAsTree::class);
        class_exists(IntersectionTree::class);
        class_exists(IndexedAccessTree::class);
        class_exists(FieldEllipsis::class);
        class_exists(MethodTree::class);
        class_exists(Value::class);
        class_exists(NullableTree::class);
        class_exists(Root::class);
        class_exists(CallableParamTree::class);
        class_exists(GenericTree::class);
        class_exists(MethodParamTree::class);
        class_exists(TemplateIsTree::class);
        class_exists(MethodWithReturnTypeTree::class);
        class_exists(AssertionReconciler::class);
        class_exists(TypeExpander::class);
        class_exists(ComposerLock::class);
        class_exists(ConfigFile::class);
        class_exists(PluginList::class);
        class_exists(PluginListFactory::class);
        class_exists(EnableCommand::class);
        class_exists(ShowCommand::class);
        class_exists(DisableCommand::class);
        class_exists(Clause::class);
        class_exists(Functions::class);
        class_exists(ConstantTypeResolver::class);
        class_exists(ReferenceMapGenerator::class);
        class_exists(ClassConstantByWildcardResolver::class);
        class_exists(Properties::class);
        class_exists(Analyzer::class);
        class_exists(ImpureFunctionsList::class);
        class_exists(DataFlowGraph::class);
        class_exists(Reflection::class);
        class_exists(AssertionsFromInheritanceResolver::class);
        class_exists(ClassLikes::class);
        class_exists(TaintFlowGraph::class);
        class_exists(PropertyMap::class);
        class_exists(Scanner::class);
        class_exists(StorageByPatternResolver::class);
        class_exists(Populator::class);
        class_exists(InternalCallMapHandler::class);
        class_exists(Methods::class);
        class_exists(VariableUseGraph::class);
        class_exists(\Psalm\Internal\ErrorHandler::class);
        class_exists(IncludeCollector::class);
        class_exists(FileManipulationBuffer::class);
        class_exists(ClassDocblockManipulator::class);
        class_exists(CodeMigration::class);
        class_exists(PropertyDocblockManipulator::class);
        class_exists(FunctionDocblockManipulator::class);
        class_exists(ReferenceConstraint::class);
        class_exists(PhpStormMetaScanner::class);
        class_exists(VarDocblockComment::class);
        class_exists(DocblockParser::class);
        class_exists(ParsedDocblock::class);
        class_exists(FileScanner::class);
        class_exists(UnresolvedBinaryOp::class);
        class_exists(Constant::class);
        class_exists(ArrayOffsetFetch::class);
        class_exists(ScalarValue::class);
        class_exists(EnumPropertyFetch::class);
        class_exists(UnresolvedBitwiseOr::class);
        class_exists(UnresolvedDivisionOp::class);
        class_exists(ArraySpread::class);
        class_exists(KeyValuePair::class);
        class_exists(UnresolvedMultiplicationOp::class);
        class_exists(UnresolvedConcatOp::class);
        class_exists(UnresolvedAdditionOp::class);
        class_exists(ArrayValue::class);
        class_exists(UnresolvedTernary::class);
        class_exists(UnresolvedBitwiseXor::class);
        class_exists(EnumValueFetch::class);
        class_exists(UnresolvedSubtractionOp::class);
        class_exists(ClassConstant::class);
        class_exists(EnumNameFetch::class);
        class_exists(UnresolvedBitwiseAnd::class);
        class_exists(ClassLikeDocblockComment::class);
        class_exists(FunctionDocblockComment::class);
        class_exists(UnresolvedConstantComponent::class);
        class_exists(InterfaceAnalyzer::class);
        class_exists(ReturnTypeCollector::class);
        class_exists(ReturnTypeAnalyzer::class);
        class_exists(MethodAnalyzer::class);
        class_exists(CanAlias::class);
        class_exists(TypeAnalyzer::class);
        class_exists(NamespaceAnalyzer::class);
        class_exists(ProjectAnalyzer::class);
        class_exists(AlgebraAnalyzer::class);
        class_exists(CommentAnalyzer::class);
        class_exists(IssueData::class);
        class_exists(ReturnAnalyzer::class);
        class_exists(UnsetAnalyzer::class);
        class_exists(EchoAnalyzer::class);
        class_exists(UnusedAssignmentRemover::class);
        class_exists(ExpressionAnalyzer::class);
        class_exists(GlobalAnalyzer::class);
        class_exists(StaticAnalyzer::class);
        class_exists(YieldFromAnalyzer::class);
        class_exists(EncapsulatedStringAnalyzer::class);
        class_exists(InstanceofAnalyzer::class);
        class_exists(BooleanNotAnalyzer::class);
        class_exists(ArrayCreationInfo::class);
        class_exists(ArrayAnalyzer::class);
        class_exists(CloneAnalyzer::class);
        class_exists(BitwiseNotAnalyzer::class);
        class_exists(SimpleTypeInferer::class);
        class_exists(CallAnalyzer::class);
        class_exists(YieldAnalyzer::class);
        class_exists(StaticPropertyAssignmentAnalyzer::class);
        class_exists(AssignedProperty::class);
        class_exists(ArrayAssignmentAnalyzer::class);
        class_exists(InstancePropertyAssignmentAnalyzer::class);
        class_exists(IncludeAnalyzer::class);
        class_exists(IssetAnalyzer::class);
        class_exists(AssignmentAnalyzer::class);
        class_exists(ConcatAnalyzer::class);
        class_exists(NonComparisonOpAnalyzer::class);
        class_exists(AndAnalyzer::class);
        class_exists(CoalesceAnalyzer::class);
        class_exists(OrAnalyzer::class);
        class_exists(ArithmeticOpAnalyzer::class);
        class_exists(CastAnalyzer::class);
        class_exists(ConstFetchAnalyzer::class);
        class_exists(InstancePropertyFetchAnalyzer::class);
        class_exists(AtomicPropertyFetchAnalyzer::class);
        class_exists(VariableFetchAnalyzer::class);
        class_exists(ArrayFetchAnalyzer::class);
        class_exists(StaticPropertyFetchAnalyzer::class);
        class_exists(FunctionCallReturnTypeFetcher::class);
        class_exists(FunctionCallAnalyzer::class);
        class_exists(HighOrderFunctionArgHandler::class);
        class_exists(ArgumentMapPopulator::class);
        class_exists(ArgumentAnalyzer::class);
        class_exists(HighOrderFunctionArgInfo::class);
        class_exists(ArgumentsAnalyzer::class);
        class_exists(ArrayFunctionArgumentsAnalyzer::class);
        class_exists(NamedFunctionCallHandler::class);
        class_exists(ExistingAtomicStaticCallAnalyzer::class);
        class_exists(AtomicStaticCallAnalyzer::class);
        class_exists(StaticCallAnalyzer::class);
        class_exists(NewAnalyzer::class);
        class_exists(FunctionCallInfo::class);
        class_exists(ClassTemplateParamCollector::class);
        class_exists(AtomicMethodCallAnalysisResult::class);
        class_exists(MissingMethodCallHandler::class);
        class_exists(MethodCallPurityAnalyzer::class);
        class_exists(MethodVisibilityAnalyzer::class);
        class_exists(ExistingAtomicMethodCallAnalyzer::class);
        class_exists(AtomicCallContext::class);
        class_exists(MethodCallProhibitionAnalyzer::class);
        class_exists(AtomicMethodCallAnalyzer::class);
        class_exists(MethodCallReturnTypeFetcher::class);
        class_exists(MethodCallAnalyzer::class);
        class_exists(ThrowAnalyzer::class);
        class_exists(MatchAnalyzer::class);
        class_exists(IncDecExpressionAnalyzer::class);
        class_exists(NullsafeAnalyzer::class);
        class_exists(ExpressionIdentifier::class);
        class_exists(EmptyAnalyzer::class);
        class_exists(MagicConstAnalyzer::class);
        class_exists(TernaryAnalyzer::class);
        class_exists(UnaryPlusMinusAnalyzer::class);
        class_exists(PrintAnalyzer::class);
        class_exists(AssertionFinder::class);
        class_exists(ExitAnalyzer::class);
        class_exists(BinaryOpAnalyzer::class);
        class_exists(ClassConstAnalyzer::class);
        class_exists(EvalAnalyzer::class);
        class_exists(BreakAnalyzer::class);
        class_exists(ContinueAnalyzer::class);
        class_exists(ForAnalyzer::class);
        class_exists(WhileAnalyzer::class);
        class_exists(TryAnalyzer::class);
        class_exists(SwitchCaseAnalyzer::class);
        class_exists(IfElseAnalyzer::class);
        class_exists(ForeachAnalyzer::class);
        class_exists(ElseIfAnalyzer::class);
        class_exists(ElseAnalyzer::class);
        class_exists(IfAnalyzer::class);
        class_exists(SwitchAnalyzer::class);
        class_exists(LoopAnalyzer::class);
        class_exists(IfConditionalAnalyzer::class);
        class_exists(DoAnalyzer::class);
        class_exists(DeclareAnalyzer::class);
        class_exists(ClassLikeAnalyzer::class);
        class_exists(MethodComparator::class);
        class_exists(DataFlowNodeData::class);
        class_exists(FunctionLikeAnalyzer::class);
        class_exists(ClassAnalyzer::class);
        class_exists(FunctionAnalyzer::class);
        class_exists(FileAnalyzer::class);
        class_exists(ClosureAnalyzer::class);
        class_exists(SourceAnalyzer::class);
        class_exists(TraitAnalyzer::class);
        class_exists(StatementsAnalyzer::class);
        class_exists(ScopeAnalyzer::class);
        class_exists(AttributesAnalyzer::class);
        class_exists(ClassLikeNameOptions::class);
        class_exists(FormulaGenerator::class);
        class_exists(NodeTypeProvider::class);
        class_exists(CodeLocation::class);
        class_exists(IssueBuffer::class);
        class_exists(Config::class);
        class_exists(HasAttributesInterface::class);
        class_exists(ClassConstantStorage::class);
        class_exists(FunctionLikeStorage::class);
        class_exists(Assertion::class);
        class_exists(FunctionStorage::class);
        class_exists(CustomMetadataTrait::class);
        class_exists(PropertyStorage::class);
        class_exists(UnserializeMemoryUsageSuppressionTrait::class);
        class_exists(AttributeStorage::class);
        class_exists(ArrayKeyExists::class);
        class_exists(Falsy::class);
        class_exists(Truthy::class);
        class_exists(InArray::class);
        class_exists(IsIsset::class);
        class_exists(IsLessThanOrEqualTo::class);
        class_exists(NonEmpty::class);
        class_exists(HasAtLeastCount::class);
        class_exists(IsClassNotEqual::class);
        class_exists(IsNotLooselyEqual::class);
        class_exists(IsGreaterThanOrEqualTo::class);
        class_exists(IsNotIdentical::class);
        class_exists(IsLooselyEqual::class);
        class_exists(IsAClass::class);
        class_exists(HasExactCount::class);
        class_exists(NestedAssertions::class);
        class_exists(IsCountable::class);
        class_exists(HasArrayKey::class);
        class_exists(DoesNotHaveExactCount::class);
        class_exists(IsGreaterThan::class);
        class_exists(IsType::class);
        class_exists(NotInArray::class);
        class_exists(IsClassEqual::class);
        class_exists(HasStringArrayAccess::class);
        class_exists(DoesNotHaveAtLeastCount::class);
        class_exists(IsLessThan::class);
        class_exists(Any::class);
        class_exists(IsNotCountable::class);
        class_exists(\Psalm\Storage\Assertion\Empty_::class);
        class_exists(DoesNotHaveMethod::class);
        class_exists(IsNotAClass::class);
        class_exists(NotNonEmptyCountable::class);
        class_exists(HasIntOrStringArrayAccess::class);
        class_exists(IsIdentical::class);
        class_exists(HasMethod::class);
        class_exists(NotNestedAssertions::class);
        class_exists(IsNotType::class);
        class_exists(IsEqualIsset::class);
        class_exists(ArrayKeyDoesNotExist::class);
        class_exists(IsNotIsset::class);
        class_exists(NonEmptyCountable::class);
        class_exists(ClassLikeStorage::class);
        class_exists(FunctionLikeParameter::class);
        class_exists(AttributeArg::class);
        class_exists(ImmutableNonCloneableTrait::class);
        class_exists(FileStorage::class);
        class_exists(EnumCaseStorage::class);
        class_exists(MethodStorage::class);
        class_exists(Possibilities::class);
        class_exists(PluginRegistrationSocket::class);
        class_exists(Context::class);
        class_exists(MutableTypeVisitor::class);
        class_exists(UnionTrait::class);
        class_exists(Atomic::class);
        class_exists(TNumeric::class);
        class_exists(TClassStringMap::class);
        class_exists(TLowercaseString::class);
        class_exists(TEmptyScalar::class);
        class_exists(TClassConstant::class);
        class_exists(TUnknownClassString::class);
        class_exists(TCallableString::class);
        class_exists(DependentType::class);
        class_exists(TTemplateParam::class);
        class_exists(TLiteralClassString::class);
        class_exists(TClosedResource::class);
        class_exists(TTraitString::class);
        class_exists(TEnumCase::class);
        class_exists(TNonFalsyString::class);
        class_exists(GenericTrait::class);
        class_exists(TClassString::class);
        class_exists(TCallableObject::class);
        class_exists(TMixed::class);
        class_exists(TLiteralInt::class);
        class_exists(TCallable::class);
        class_exists(TVoid::class);
        class_exists(TString::class);
        class_exists(TArrayKey::class);
        class_exists(TNonspecificLiteralString::class);
        class_exists(TLiteralString::class);
        class_exists(TAnonymousClassInstance::class);
        class_exists(TTemplateParamClass::class);
        class_exists(TNonEmptyString::class);
        class_exists(TNonEmptyArray::class);
        class_exists(HasIntersectionTrait::class);
        class_exists(TConditional::class);
        class_exists(TDependentGetType::class);
        class_exists(TIntRange::class);
        class_exists(TSingleLetter::class);
        class_exists(TTemplateValueOf::class);
        class_exists(TDependentGetDebugType::class);
        class_exists(TFalse::class);
        class_exists(TCallableKeyedArray::class);
        class_exists(TNull::class);
        class_exists(TNonEmptyScalar::class);
        class_exists(TObject::class);
        class_exists(TTemplateKeyOf::class);
        class_exists(TScalar::class);
        class_exists(TNumericString::class);
        class_exists(TObjectWithProperties::class);
        class_exists(TIntMaskOf::class);
        class_exists(TNonEmptyMixed::class);
        class_exists(\Psalm\Type\Atomic\Scalar::class);
        class_exists(TIterable::class);
        class_exists(TKeyOf::class);
        class_exists(TClosure::class);
        class_exists(TNever::class);
        class_exists(TCallableInterface::class);
        class_exists(TTemplatePropertiesOf::class);
        class_exists(TEmptyNumeric::class);
        class_exists(TGenericObject::class);
        class_exists(CallableTrait::class);
        class_exists(TNamedObject::class);
        class_exists(TPropertiesOf::class);
        class_exists(TLiteralFloat::class);
        class_exists(TEmptyMixed::class);
        class_exists(TResource::class);
        class_exists(TDependentGetClass::class);
        class_exists(TTypeAlias::class);
        class_exists(TNonEmptyNonspecificLiteralString::class);
        class_exists(TBool::class);
        class_exists(TKeyedArray::class);
        class_exists(TTrue::class);
        class_exists(TIntMask::class);
        class_exists(TFloat::class);
        class_exists(TInt::class);
        class_exists(TTemplateIndexedAccess::class);
        class_exists(TArray::class);
        class_exists(TNonEmptyLowercaseString::class);
        class_exists(TValueOf::class);
        class_exists(TNonspecificLiteralInt::class);
        class_exists(Reconciler::class);
        class_exists(TaintKindGroup::class);
        class_exists(TypeNode::class);
        class_exists(MutableUnion::class);
        class_exists(Union::class);
        class_exists(TypeVisitor::class);
        class_exists(TaintKind::class);
        class_exists(Aliases::class);
        class_exists(CircularReference::class);
        class_exists(UnevaluatedCode::class);
        class_exists(MixedIssueTrait::class);
        class_exists(MissingPropertyType::class);
        class_exists(CodeIssue::class);
        class_exists(MixedPropertyTypeCoercion::class);
        class_exists(TooManyArguments::class);
        class_exists(IfThisIsMismatch::class);
        class_exists(DeprecatedTrait::class);
        class_exists(NullFunctionCall::class);
        class_exists(MixedMethodCall::class);
        class_exists(InvalidTraversableImplementation::class);
        class_exists(MissingDependency::class);
        class_exists(UnusedDocblockParam::class);
        class_exists(TypeDoesNotContainType::class);
        class_exists(PossiblyNullArrayAccess::class);
        class_exists(TaintedSSRF::class);
        class_exists(MissingClosureReturnType::class);
        class_exists(NamedArgumentNotAllowed::class);
        class_exists(RiskyCast::class);
        class_exists(MethodSignatureMismatch::class);
        class_exists(MixedArrayAccess::class);
        class_exists(MixedIssue::class);
        class_exists(DuplicateParam::class);
        class_exists(InvalidOverride::class);
        class_exists(ReservedWord::class);
        class_exists(TooManyTemplateParams::class);
        class_exists(PossiblyNullArrayAssignment::class);
        class_exists(UndefinedTrait::class);
        class_exists(ImpurePropertyAssignment::class);
        class_exists(ImpureStaticVariable::class);
        class_exists(PossiblyInvalidArgument::class);
        class_exists(ImpureMethodCall::class);
        class_exists(PossiblyFalsePropertyAssignmentValue::class);
        class_exists(UndefinedThisPropertyFetch::class);
        class_exists(MismatchingDocblockReturnType::class);
        class_exists(MissingOverrideAttribute::class);
        class_exists(TaintedSql::class);
        class_exists(PossiblyUndefinedVariable::class);
        class_exists(FunctionIssue::class);
        class_exists(InvalidToString::class);
        class_exists(UndefinedPropertyFetch::class);
        class_exists(PossiblyInvalidMethodCall::class);
        class_exists(NoInterfaceProperties::class);
        class_exists(MethodIssue::class);
        class_exists(PossiblyInvalidOperand::class);
        class_exists(ImplementedReturnTypeMismatch::class);
        class_exists(UnimplementedInterfaceMethod::class);
        class_exists(MixedClone::class);
        class_exists(InvalidArrayOffset::class);
        class_exists(StringIncrement::class);
        class_exists(LoopInvalidation::class);
        class_exists(TaintedCustom::class);
        class_exists(TaintedShell::class);
        class_exists(UnhandledMatchCondition::class);
        class_exists(TaintedSleep::class);
        class_exists(NullArrayAccess::class);
        class_exists(PossiblyInvalidArrayOffset::class);
        class_exists(RedundantConditionGivenDocblockType::class);
        class_exists(MissingImmutableAnnotation::class);
        class_exists(TaintedSystemSecret::class);
        class_exists(InvalidPropertyAssignment::class);
        class_exists(MethodSignatureMustProvideReturnType::class);
        class_exists(PossiblyUnusedReturnValue::class);
        class_exists(InvalidReturnStatement::class);
        class_exists(TaintedUserSecret::class);
        class_exists(UndefinedMagicPropertyAssignment::class);
        class_exists(PossiblyInvalidPropertyAssignment::class);
        class_exists(UnusedVariable::class);
        class_exists(PropertyTypeCoercion::class);
        class_exists(AssignmentToVoid::class);
        class_exists(UnusedConstructor::class);
        class_exists(ParseError::class);
        class_exists(InvalidArgument::class);
        class_exists(MixedStringOffsetAssignment::class);
        class_exists(DeprecatedInterface::class);
        class_exists(UndefinedMagicMethod::class);
        class_exists(FalsableReturnStatement::class);
        class_exists(InvalidArrayAssignment::class);
        class_exists(UnrecognizedStatement::class);
        class_exists(PossiblyInvalidClone::class);
        class_exists(ImplicitToStringCast::class);
        class_exists(PossiblyUndefinedIntArrayOffset::class);
        class_exists(PsalmInternalError::class);
        class_exists(ExtensionRequirementViolation::class);
        class_exists(ClassConstantIssue::class);
        class_exists(InvalidClassConstantType::class);
        class_exists(PossiblyInvalidFunctionCall::class);
        class_exists(UninitializedProperty::class);
        class_exists(InvalidReturnType::class);
        class_exists(LiteralKeyUnshapedArray::class);
        class_exists(NullIterator::class);
        class_exists(ArgumentTypeCoercion::class);
        class_exists(DuplicateEnumCaseValue::class);
        class_exists(NullReference::class);
        class_exists(ConfigIssue::class);
        class_exists(PossiblyUnusedMethod::class);
        class_exists(PossiblyInvalidPropertyFetch::class);
        class_exists(TaintedHtml::class);
        class_exists(VariableIssue::class);
        class_exists(MixedPropertyFetch::class);
        class_exists(InvalidEnumBackingType::class);
        class_exists(InvalidParent::class);
        class_exists(DeprecatedProperty::class);
        class_exists(UndefinedMagicPropertyFetch::class);
        class_exists(PossiblyFalseOperand::class);
        class_exists(UnusedBaselineEntry::class);
        class_exists(UndefinedInterface::class);
        class_exists(TaintedInclude::class);
        class_exists(UndefinedAttributeClass::class);
        class_exists(NoValue::class);
        class_exists(UndefinedPropertyAssignment::class);
        class_exists(InvalidScalarArgument::class);
        class_exists(RedundantFlag::class);
        class_exists(RedundantCast::class);
        class_exists(TaintedExtract::class);
        class_exists(ForbiddenCode::class);
        class_exists(InternalClass::class);
        class_exists(MixedArgument::class);
        class_exists(TaintedCookie::class);
        class_exists(DuplicateClass::class);
        class_exists(TooFewArguments::class);
        class_exists(LessSpecificClassConstantType::class);
        class_exists(PossiblyInvalidPropertyAssignmentValue::class);
        class_exists(InvalidPropertyFetch::class);
        class_exists(PossiblyUnusedProperty::class);
        class_exists(ComplexFunction::class);
        class_exists(DuplicateProperty::class);
        class_exists(RawObjectIteration::class);
        class_exists(TaintedLdap::class);
        class_exists(InvalidStaticInvocation::class);
        class_exists(ReferenceConstraintViolation::class);
        class_exists(PossiblyNullArgument::class);
        class_exists(InaccessibleClassConstant::class);
        class_exists(PossiblyNullPropertyAssignmentValue::class);
        class_exists(NoEnumProperties::class);
        class_exists(NonVariableReferenceReturn::class);
        class_exists(RedundantCastGivenDocblockType::class);
        class_exists(UnsafeGenericInstantiation::class);
        class_exists(NullPropertyAssignment::class);
        class_exists(DirectConstructorCall::class);
        class_exists(MixedFunctionCall::class);
        class_exists(PossiblyNullPropertyFetch::class);
        class_exists(MixedArrayAssignment::class);
        class_exists(ParamNameMismatch::class);
        class_exists(PossiblyFalseIterator::class);
        class_exists(UndefinedTrace::class);
        class_exists(RiskyTruthyFalsyComparison::class);
        class_exists(ImpurePropertyFetch::class);
        class_exists(InvalidEnumMethod::class);
        class_exists(UnsafeInstantiation::class);
        class_exists(MixedReturnStatement::class);
        class_exists(MixedArgumentTypeCoercion::class);
        class_exists(LessSpecificReturnStatement::class);
        class_exists(UnusedMethodCall::class);
        class_exists(MissingParamType::class);
        class_exists(NonInvariantPropertyType::class);
        class_exists(InvalidNullableReturnType::class);
        class_exists(TaintedXpath::class);
        class_exists(ArgumentIssue::class);
        class_exists(InvalidPropertyAssignmentValue::class);
        class_exists(UnusedMethod::class);
        class_exists(Trace::class);
        class_exists(CheckType::class);
        class_exists(MissingClassConstType::class);
        class_exists(FalseOperand::class);
        class_exists(InvalidAttribute::class);
        class_exists(InvalidGlobal::class);
        class_exists(PossiblyFalseReference::class);
        class_exists(MoreSpecificImplementedParamType::class);
        class_exists(MismatchingDocblockParamType::class);
        class_exists(ConstructorSignatureMismatch::class);
        class_exists(PossiblyInvalidDocblockTag::class);
        class_exists(InvalidEnumCaseValue::class);
        class_exists(OverriddenInterfaceConstant::class);
        class_exists(DeprecatedFunction::class);
        class_exists(TaintedTextWithQuotes::class);
        class_exists(PossiblyNullIterator::class);
        class_exists(InterfaceInstantiation::class);
        class_exists(TaintedCallable::class);
        class_exists(InvalidConstantAssignmentValue::class);
        class_exists(PossiblyFalseArgument::class);
        class_exists(UndefinedMethod::class);
        class_exists(ImpureStaticProperty::class);
        class_exists(MissingReturnType::class);
        class_exists(InvalidArrayAccess::class);
        class_exists(PossiblyUndefinedGlobalVariable::class);
        class_exists(PossiblyInvalidArrayAccess::class);
        class_exists(NullArrayOffset::class);
        class_exists(MethodSignatureMustOmitReturnType::class);
        class_exists(MixedPropertyAssignment::class);
        class_exists(InvalidClass::class);
        class_exists(UnresolvableInclude::class);
        class_exists(MixedOperand::class);
        class_exists(PropertyIssue::class);
        class_exists(PrivateFinalMethod::class);
        class_exists(NullPropertyFetch::class);
        class_exists(InaccessibleMethod::class);
        class_exists(DuplicateArrayKey::class);
        class_exists(TaintedHeader::class);
        class_exists(RedundantCondition::class);
        class_exists(MixedReturnTypeCoercion::class);
        class_exists(ContinueOutsideLoop::class);
        class_exists(TaintedFile::class);
        class_exists(DeprecatedMethod::class);
        class_exists(NullArgument::class);
        class_exists(DuplicateFunction::class);
        class_exists(MoreSpecificReturnType::class);
        class_exists(UnimplementedAbstractMethod::class);
        class_exists(ClassIssue::class);
        class_exists(MutableDependency::class);
        class_exists(PossiblyUndefinedStringArrayOffset::class);
        class_exists(UnusedClass::class);
        class_exists(InvalidLiteralArgument::class);
        class_exists(TaintedUnserialize::class);
        class_exists(RedundantFunctionCallGivenDocblockType::class);
        class_exists(OverriddenPropertyAccess::class);
        class_exists(ReferenceReusedFromConfusingScope::class);
        class_exists(UnsupportedPropertyReferenceUsage::class);
        class_exists(PossiblyUndefinedMethod::class);
        class_exists(UnusedFunctionCall::class);
        class_exists(LessSpecificImplementedReturnType::class);
        class_exists(PossiblyInvalidArrayAssignment::class);
        class_exists(MixedAssignment::class);
        class_exists(OverriddenFinalConstant::class);
        class_exists(UnusedProperty::class);
        class_exists(InvalidParamDefault::class);
        class_exists(OverriddenMethodAccess::class);
        class_exists(PossiblyNullArrayOffset::class);
        class_exists(ImpureFunctionCall::class);
        class_exists(AmbiguousConstantInheritance::class);
        class_exists(UndefinedFunction::class);
        class_exists(MixedArrayTypeCoercion::class);
        class_exists(PossibleRawObjectIteration::class);
        class_exists(ParentNotFound::class);
        class_exists(InvalidCatch::class);
        class_exists(RedundantFunctionCall::class);
        class_exists(AbstractInstantiation::class);
        class_exists(PropertyNotSetInConstructor::class);
        class_exists(MixedArrayOffset::class);
        class_exists(UnusedPsalmSuppress::class);
        class_exists(TypeDoesNotContainNull::class);
        class_exists(PossiblyNullFunctionCall::class);
        class_exists(DocblockTypeContradiction::class);
        class_exists(RedundantIdentityWithTrue::class);
        class_exists(PossiblyInvalidCast::class);
        class_exists(InvalidFalsableReturnType::class);
        class_exists(ConflictingReferenceConstraint::class);
        class_exists(InvalidDocblockParamName::class);
        class_exists(RedundantPropertyInitializationCheck::class);
        class_exists(DuplicateMethod::class);
        class_exists(InvalidStringClass::class);
        class_exists(InvalidOperand::class);
        class_exists(InheritorViolation::class);
        class_exists(PluginIssue::class);
        class_exists(UnresolvableConstant::class);
        class_exists(LessSpecificReturnType::class);
        class_exists(InvalidScope::class);
        class_exists(ImplementedParamTypeMismatch::class);
        class_exists(InvalidThrow::class);
        class_exists(InvalidIterator::class);
        class_exists(UncaughtThrowInGlobalScope::class);
        class_exists(MismatchingDocblockPropertyType::class);
        class_exists(NonInvariantDocblockPropertyType::class);
        class_exists(DeprecatedConstant::class);
        class_exists(NullOperand::class);
        class_exists(InvalidPassByReference::class);
        class_exists(ClassMustBeFinal::class);
        class_exists(TaintedEval::class);
        class_exists(UnusedClosureParam::class);
        class_exists(NullableReturnStatement::class);
        class_exists(PossiblyUnusedParam::class);
        class_exists(MissingThrowsDocblock::class);
        class_exists(UnusedReturnValue::class);
        class_exists(ConstantDeclarationInTrait::class);
        class_exists(TaintedInput::class);
        class_exists(UnsupportedReferenceUsage::class);
        class_exists(ImpureVariable::class);
        class_exists(UnrecognizedExpression::class);
        class_exists(ImplementationRequirementViolation::class);
        class_exists(MissingConstructor::class);
        class_exists(UnusedForeachValue::class);
        class_exists(NonStaticSelfCall::class);
        class_exists(UndefinedClass::class);
        class_exists(MissingClosureParamType::class);
        class_exists(InvalidCast::class);
        class_exists(AbstractMethodCall::class);
        class_exists(UndefinedInterfaceMethod::class);
        class_exists(MissingTemplateParam::class);
        class_exists(UnusedIssueHandlerSuppression::class);
        class_exists(PossiblyNullReference::class);
        class_exists(MissingFile::class);
        class_exists(UndefinedConstant::class);
        class_exists(InvalidFunctionCall::class);
        class_exists(EmptyArrayAccess::class);
        class_exists(InvalidDocblock::class);
        class_exists(InvalidNamedArgument::class);
        class_exists(UndefinedGlobalVariable::class);
        class_exists(UndefinedThisPropertyAssignment::class);
        class_exists(ImpureByReferenceAssignment::class);
        class_exists(InaccessibleProperty::class);
        class_exists(InvalidTypeImport::class);
        class_exists(PossiblyInvalidIterator::class);
        class_exists(InvalidTemplateParam::class);
        class_exists(InvalidClone::class);
        class_exists(InvalidMethodCall::class);
        class_exists(MissingDocblockType::class);
        class_exists(DeprecatedClass::class);
        class_exists(ParadoxicalCondition::class);
        class_exists(PossiblyUndefinedArrayOffset::class);
        class_exists(InternalProperty::class);
        class_exists(UndefinedVariable::class);
        class_exists(InvalidInterfaceImplementation::class);
        class_exists(UnusedParam::class);
        class_exists(DuplicateEnumCase::class);
        class_exists(ComplexMethod::class);
        class_exists(PossiblyNullPropertyAssignment::class);
        class_exists(InvalidExtendClass::class);
        class_exists(PossiblyNullOperand::class);
        class_exists(TraitMethodSignatureMismatch::class);
        class_exists(UndefinedDocblockClass::class);
        class_exists(DuplicateConstant::class);
        class_exists(UnnecessaryVarAnnotation::class);
        class_exists(InternalMethod::class);
        class_exists(FileBasedPluginAdapter::class);
        class_exists(JunitReport::class);
        class_exists(ByIssueLevelAndTypeReport::class);
        class_exists(CodeClimateReport::class);
        class_exists(PhpStormReport::class);
        class_exists(ReportOptions::class);
        class_exists(CountReport::class);
        class_exists(CheckstyleReport::class);
        class_exists(TextReport::class);
        class_exists(JsonReport::class);
        class_exists(CompactReport::class);
        class_exists(PylintReport::class);
        class_exists(ConsoleReport::class);
        class_exists(JsonSummaryReport::class);
        class_exists(SonarqubeReport::class);
        class_exists(GithubActionsReport::class);
        class_exists(EmacsReport::class);
        class_exists(XmlReport::class);
        class_exists(SarifReport::class);
        class_exists(ErrorBaseline::class);
        class_exists(VirtualExpression::class);
        class_exists(VirtualGoto::class);
        class_exists(VirtualFor::class);
        class_exists(VirtualHaltCompiler::class);
        class_exists(VirtualContinue::class);
        class_exists(VirtualAlias::class);
        class_exists(VirtualPrecedence::class);
        class_exists(VirtualTraitUse::class);
        class_exists(VirtualSwitch::class);
        class_exists(VirtualClassMethod::class);
        class_exists(VirtualCase::class);
        class_exists(VirtualInterface::class);
        class_exists(VirtualWhile::class);
        class_exists(VirtualBreak::class);
        class_exists(VirtualDeclare::class);
        class_exists(VirtualIf::class);
        class_exists(VirtualFunction::class);
        class_exists(VirtualTrait::class);
        class_exists(VirtualEcho::class);
        class_exists(VirtualUse::class);
        class_exists(VirtualElseIf::class);
        class_exists(VirtualGroupUse::class);
        class_exists(VirtualStatic::class);
        class_exists(VirtualForeach::class);
        class_exists(VirtualGlobal::class);
        class_exists(VirtualClass::class);
        class_exists(VirtualDeclareItem::class);
        class_exists(VirtualReturn::class);
        class_exists(VirtualProperty::class);
        class_exists(VirtualTryCatch::class);
        class_exists(VirtualConst::class);
        class_exists(VirtualCatch::class);
        class_exists(VirtualUnset::class);
        class_exists(VirtualDo::class);
        class_exists(VirtualLabel::class);
        class_exists(VirtualElse::class);
        class_exists(VirtualNamespace::class);
        class_exists(VirtualInlineHTML::class);
        class_exists(VirtualClassConst::class);
        class_exists(VirtualNop::class);
        class_exists(VirtualFinally::class);
        class_exists(VirtualAttribute::class);
        class_exists(VirtualIdentifier::class);
        class_exists(VirtualVarLikeIdentifier::class);
        class_exists(VirtualStaticVar::class);
        class_exists(VirtualMatchArm::class);
        class_exists(VirtualAssign::class);
        class_exists(VirtualInclude::class);
        class_exists(VirtualPrint::class);
        class_exists(VirtualArrayDimFetch::class);
        class_exists(VirtualError::class);
        class_exists(VirtualClosure::class);
        class_exists(VirtualConstFetch::class);
        class_exists(VirtualArrowFunction::class);
        class_exists(VirtualPropertyFetch::class);
        class_exists(VirtualVariable::class);
        class_exists(VirtualErrorSuppress::class);
        class_exists(VirtualInstanceof::class);
        class_exists(VirtualMatch::class);
        class_exists(VirtualEval::class);
        class_exists(VirtualClassConstFetch::class);
        class_exists(VirtualStaticCall::class);
        class_exists(VirtualObject::class);
        class_exists(VirtualBool::class);
        class_exists(VirtualString::class);
        class_exists(VirtualInt::class);
        class_exists(VirtualDouble::class);
        class_exists(\Psalm\Node\Expr\Cast\VirtualUnset::class);
        class_exists(VirtualArray::class);
        class_exists(VirtualUnaryMinus::class);
        class_exists(VirtualIsset::class);
        class_exists(VirtualYieldFrom::class);
        class_exists(VirtualBitwiseNot::class);
        class_exists(VirtualPreDec::class);
        class_exists(VirtualShellExec::class);
        class_exists(VirtualNullsafePropertyFetch::class);
        class_exists(VirtualMethodCall::class);
        class_exists(VirtualPostDec::class);
        class_exists(VirtualList::class);
        class_exists(VirtualMinus::class);
        class_exists(VirtualPlus::class);
        class_exists(VirtualConcat::class);
        class_exists(VirtualShiftRight::class);
        class_exists(VirtualDiv::class);
        class_exists(VirtualMod::class);
        class_exists(VirtualPow::class);
        class_exists(VirtualMul::class);
        class_exists(VirtualShiftLeft::class);
        class_exists(VirtualBitwiseXor::class);
        class_exists(VirtualCoalesce::class);
        class_exists(VirtualBitwiseOr::class);
        class_exists(VirtualBitwiseAnd::class);
        class_exists(VirtualTernary::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualMinus::class);
        class_exists(VirtualGreater::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualPlus::class);
        class_exists(VirtualNotIdentical::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualConcat::class);
        class_exists(VirtualBooleanOr::class);
        class_exists(VirtualLogicalOr::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualShiftRight::class);
        class_exists(VirtualLogicalAnd::class);
        class_exists(VirtualSpaceship::class);
        class_exists(VirtualSmaller::class);
        class_exists(VirtualBooleanAnd::class);
        class_exists(VirtualLogicalXor::class);
        class_exists(VirtualSmallerOrEqual::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualDiv::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualMod::class);
        class_exists(VirtualGreaterOrEqual::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualPow::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualMul::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualShiftLeft::class);
        class_exists(VirtualNotEqual::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualBitwiseXor::class);
        class_exists(VirtualEqual::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualCoalesce::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualBitwiseOr::class);
        class_exists(VirtualIdentical::class);
        class_exists(\Psalm\Node\Expr\BinaryOp\VirtualBitwiseAnd::class);
        class_exists(VirtualAssignRef::class);
        class_exists(VirtualYield::class);
        class_exists(VirtualNew::class);
        class_exists(VirtualPostInc::class);
        class_exists(VirtualExit::class);
        class_exists(VirtualPreInc::class);
        class_exists(VirtualUnaryPlus::class);
        class_exists(VirtualEmpty::class);
        class_exists(VirtualNullsafeMethodCall::class);
        class_exists(VirtualStaticPropertyFetch::class);
        class_exists(VirtualBooleanNot::class);
        class_exists(VirtualThrow::class);
        class_exists(\Psalm\Node\Expr\VirtualArray::class);
        class_exists(VirtualFuncCall::class);
        class_exists(VirtualClone::class);
        class_exists(VirtualAttributeGroup::class);
        class_exists(VirtualNullableType::class);
        class_exists(VirtualArrayItem::class);
        class_exists(VirtualNode::class);
        class_exists(\Psalm\Node\VirtualConst::class);
        class_exists(VirtualUseItem::class);
        class_exists(VirtualParam::class);
        class_exists(VirtualFullyQualified::class);
        class_exists(VirtualRelative::class);
        class_exists(VirtualName::class);
        class_exists(VirtualPropertyItem::class);
        class_exists(\Psalm\Node\Scalar\VirtualString::class);
        class_exists(VirtualInterpolatedString::class);
        class_exists(VirtualDir::class);
        class_exists(VirtualFile::class);
        class_exists(\Psalm\Node\Scalar\MagicConst\VirtualFunction::class);
        class_exists(\Psalm\Node\Scalar\MagicConst\VirtualTrait::class);
        class_exists(\Psalm\Node\Scalar\MagicConst\VirtualClass::class);
        class_exists(\Psalm\Node\Scalar\MagicConst\VirtualNamespace::class);
        class_exists(VirtualLine::class);
        class_exists(VirtualMethod::class);
        class_exists(\Psalm\Node\Scalar\VirtualInt::class);
        class_exists(VirtualInterpolatedStringPart::class);
        class_exists(VirtualFloat::class);
        class_exists(VirtualArg::class);
        class_exists(VirtualUnionType::class);
        class_exists(VirtualClosureUse::class);
        class_exists(Codebase::class);
        class_exists(InvalidMethodOverrideException::class);
        class_exists(ConfigCreationException::class);
        class_exists(FileIncludeException::class);
        class_exists(RefactorException::class);
        class_exists(UnresolvableConstantException::class);
        class_exists(UnanalyzedFileException::class);
        class_exists(UnpreparedAnalysisException::class);
        class_exists(InvalidClasslikeOverrideException::class);
        class_exists(UnpopulatedClasslikeException::class);
        class_exists(TypeParseTreeException::class);
        class_exists(CircularReferenceException::class);
        class_exists(ConfigNotFoundException::class);
        class_exists(UnsupportedIssueToFixException::class);
        class_exists(ScopeAnalysisException::class);
        class_exists(CodeException::class);
        class_exists(IncorrectDocblockException::class);
        class_exists(DocblockParseException::class);
        class_exists(ConfigException::class);
        class_exists(ComplicatedExpressionException::class);
        class_exists(Report::class);
        class_exists(FileSource::class);
        class_exists(SourceControlInfo::class);
        class_exists(CommitInfo::class);
        class_exists(RemoteInfo::class);
        class_exists(GitInfo::class);
        class_exists(PluginFileExtensionsSocket::class);
        class_exists(StatementsSource::class);

        self::$preloaded = true;
    }
}
